// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ResetPasswordView should render without crashing 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Connect(ResetPasswordView)
      changePasswordAction={[MockFunction]}
      history={
        Object {
          "push": [MockFunction],
        }
      }
      match={
        Object {
          "params": Object {
            "token": "ghjkbvfghj",
          },
        }
      }
      resetPasswordAction={[MockFunction]}
    />
  </Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "getWrappingComponentRenderer": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": Provider {
      "_isMounted": true,
      "_reactInternalFiber": FiberNode {
        "_debugHookTypes": null,
        "_debugID": 63,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 62,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(ResetPasswordView)
                changePasswordAction={[MockFunction]}
                history={
                  Object {
                    "push": [MockFunction],
                  }
                }
                match={
                  Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  }
                }
                resetPasswordAction={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "wrappingComponentProps": null,
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "children": <Connect(ResetPasswordView)
                changePasswordAction={[MockFunction]}
                history={
                  Object {
                    "push": [MockFunction],
                  }
                }
                match={
                  Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  }
                }
                resetPasswordAction={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "wrappingComponentProps": null,
          },
          "mode": 0,
          "nextEffect": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 60,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 60,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                    <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 15,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  }
                }
                wrappingComponentProps={null}
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div>
                  <div>
                    <img
                      alt="text"
                      class="login background-image"
                      src="background-image-3.jpg"
                    />
                    <div
                      class="login-wrapper"
                    >
                      <h3>
                        Authors Haven
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <label
                            for="newpassword"
                          >
                            New Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="password"
                            placeholder="Enter new password"
                            required=""
                            type="password"
                          />
                          <span
                            class="text-danger"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <label
                            for="confirmpassword"
                          >
                            Confirm Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="confirmPassword"
                            placeholder="Re-enter password"
                            required=""
                            type="password"
                          />
                        </div>
                        <p>
                          <button
                            class="btn btn-primary"
                            id="login-button"
                          >
                            Change Password
                          </button>
                        </p>
                      </form>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 15,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                  wrappingComponentProps={null}
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(ResetPasswordView)
                changePasswordAction={[MockFunction]}
                history={
                  Object {
                    "push": [MockFunction],
                  }
                }
                match={
                  Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  }
                }
                resetPasswordAction={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "wrappingComponentProps": null,
          },
          "ref": null,
          "return": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 60,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 60,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                    <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 15,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  }
                }
                wrappingComponentProps={null}
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div>
                  <div>
                    <img
                      alt="text"
                      class="login background-image"
                      src="background-image-3.jpg"
                    />
                    <div
                      class="login-wrapper"
                    >
                      <h3>
                        Authors Haven
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <label
                            for="newpassword"
                          >
                            New Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="password"
                            placeholder="Enter new password"
                            required=""
                            type="password"
                          />
                          <span
                            class="text-danger"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <label
                            for="confirmpassword"
                          >
                            Confirm Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="confirmPassword"
                            placeholder="Re-enter password"
                            required=""
                            type="password"
                          />
                        </div>
                        <p>
                          <button
                            class="btn btn-primary"
                            id="login-button"
                          >
                            Change Password
                          </button>
                        </p>
                      </form>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 15,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                  wrappingComponentProps={null}
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "refs": Object {},
            "rootFinderInstance": null,
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "actualDuration": 0,
        "actualStartTime": -1,
        "alternate": null,
        "child": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 64,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 65,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": Object {
              "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/__tests__/views/resetView/__test__/resetPasswordView.test.js",
              "lineNumber": 48,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 66,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 67,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 68,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/views/resetView/resetPasswordView.js",
                    "lineNumber": 102,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 69,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/views/resetView/resetPasswordView.js",
                      "lineNumber": 103,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 70,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                        "lineNumber": 6,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 71,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                          "lineNumber": 7,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "img",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "alt": "text",
                          "className": "login background-image",
                          "src": "background-image-3.jpg",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "alt": "text",
                          "className": "login background-image",
                          "src": "background-image-3.jpg",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 72,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                            "lineNumber": 8,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 73,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                              "lineNumber": 9,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "h3",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Authors Haven",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Authors Haven",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugHookTypes": null,
                              "_debugID": 74,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                "lineNumber": 11,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugHookTypes": null,
                                "_debugID": 75,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                  "lineNumber": 13,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugHookTypes": null,
                                  "_debugID": 78,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                    "lineNumber": 14,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "label",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": "New Password",
                                    "htmlFor": "newpassword",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": "New Password",
                                    "htmlFor": "newpassword",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugHookTypes": null,
                                    "_debugID": 79,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                      "lineNumber": 15,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "input",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 1,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "className": "form-control",
                                      "minLength": 8,
                                      "name": "password",
                                      "onChange": [Function],
                                      "placeholder": "Enter new password",
                                      "required": true,
                                      "type": "password",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "className": "form-control",
                                      "minLength": 8,
                                      "name": "password",
                                      "onChange": [Function],
                                      "placeholder": "Enter new password",
                                      "required": true,
                                      "type": "password",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": FiberNode {
                                      "_debugHookTypes": null,
                                      "_debugID": 80,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": Object {
                                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                        "lineNumber": 16,
                                      },
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "contextDependencies": null,
                                      "effectTag": 0,
                                      "elementType": "span",
                                      "expirationTime": 0,
                                      "firstEffect": null,
                                      "index": 2,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "children": undefined,
                                        "className": "text-danger",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "children": undefined,
                                        "className": "text-danger",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": null,
                                      "stateNode": <span
                                        class="text-danger"
                                      />,
                                      "tag": 5,
                                      "treeBaseDuration": 0,
                                      "type": "span",
                                      "updateQueue": null,
                                    },
                                    "stateNode": <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "input",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "label",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "div",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": Array [
                                    <label
                                      htmlFor="newpassword"
                                    >
                                      New Password
                                    </label>,
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="password"
                                      onChange={[Function]}
                                      placeholder="Enter new password"
                                      required={true}
                                      type="password"
                                    />,
                                    <span
                                      className="text-danger"
                                    />,
                                  ],
                                  "className": "form-group",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": Array [
                                    <label
                                      htmlFor="newpassword"
                                    >
                                      New Password
                                    </label>,
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="password"
                                      onChange={[Function]}
                                      placeholder="Enter new password"
                                      required={true}
                                      type="password"
                                    />,
                                    <span
                                      className="text-danger"
                                    />,
                                  ],
                                  "className": "form-group",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugHookTypes": null,
                                  "_debugID": 76,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                    "lineNumber": 19,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": FiberNode {
                                    "_debugHookTypes": null,
                                    "_debugID": 81,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                      "lineNumber": 20,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "label",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 0,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": "Confirm Password",
                                      "htmlFor": "confirmpassword",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": "Confirm Password",
                                      "htmlFor": "confirmpassword",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": FiberNode {
                                      "_debugHookTypes": null,
                                      "_debugID": 82,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": Object {
                                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                        "lineNumber": 21,
                                      },
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "contextDependencies": null,
                                      "effectTag": 0,
                                      "elementType": "input",
                                      "expirationTime": 0,
                                      "firstEffect": null,
                                      "index": 1,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "className": "form-control",
                                        "minLength": 8,
                                        "name": "confirmPassword",
                                        "onChange": [Function],
                                        "placeholder": "Re-enter password",
                                        "required": true,
                                        "type": "password",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "className": "form-control",
                                        "minLength": 8,
                                        "name": "confirmPassword",
                                        "onChange": [Function],
                                        "placeholder": "Re-enter password",
                                        "required": true,
                                        "type": "password",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": null,
                                      "stateNode": <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />,
                                      "tag": 5,
                                      "treeBaseDuration": 0,
                                      "type": "input",
                                      "updateQueue": null,
                                    },
                                    "stateNode": <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "label",
                                    "updateQueue": null,
                                  },
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "div",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 1,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": Array [
                                      <label
                                        htmlFor="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>,
                                      <input
                                        className="form-control"
                                        minLength={8}
                                        name="confirmPassword"
                                        onChange={[Function]}
                                        placeholder="Re-enter password"
                                        required={true}
                                        type="password"
                                      />,
                                    ],
                                    "className": "form-group",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": Array [
                                      <label
                                        htmlFor="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>,
                                      <input
                                        className="form-control"
                                        minLength={8}
                                        name="confirmPassword"
                                        onChange={[Function]}
                                        placeholder="Re-enter password"
                                        required={true}
                                        type="password"
                                      />,
                                    ],
                                    "className": "form-group",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugHookTypes": null,
                                    "_debugID": 77,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                      "lineNumber": 24,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": FiberNode {
                                      "_debugHookTypes": null,
                                      "_debugID": 83,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": Object {
                                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                        "lineNumber": 24,
                                      },
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "contextDependencies": null,
                                      "effectTag": 0,
                                      "elementType": "button",
                                      "expirationTime": 0,
                                      "firstEffect": null,
                                      "index": 0,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "children": "Change Password",
                                        "className": "btn btn-primary",
                                        "id": "login-button",
                                        "onChange": undefined,
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "children": "Change Password",
                                        "className": "btn btn-primary",
                                        "id": "login-button",
                                        "onChange": undefined,
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": null,
                                      "stateNode": <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>,
                                      "tag": 5,
                                      "treeBaseDuration": 0,
                                      "type": "button",
                                      "updateQueue": null,
                                    },
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "p",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 2,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": <button
                                        className="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>,
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": <button
                                        className="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>,
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "p",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "div",
                                  "updateQueue": null,
                                },
                                "stateNode": <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "div",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "form",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": Array [
                                  <div
                                    className="form-group"
                                  >
                                    <label
                                      htmlFor="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="password"
                                      onChange={[Function]}
                                      placeholder="Enter new password"
                                      required={true}
                                      type="password"
                                    />
                                    <span
                                      className="text-danger"
                                    />
                                  </div>,
                                  <div
                                    className="form-group"
                                  >
                                    <label
                                      htmlFor="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="confirmPassword"
                                      onChange={[Function]}
                                      placeholder="Re-enter password"
                                      required={true}
                                      type="password"
                                    />
                                  </div>,
                                  <p>
                                    <button
                                      className="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>,
                                ],
                                "onSubmit": [Function],
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": Array [
                                  <div
                                    className="form-group"
                                  >
                                    <label
                                      htmlFor="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="password"
                                      onChange={[Function]}
                                      placeholder="Enter new password"
                                      required={true}
                                      type="password"
                                    />
                                    <span
                                      className="text-danger"
                                    />
                                  </div>,
                                  <div
                                    className="form-group"
                                  >
                                    <label
                                      htmlFor="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="confirmPassword"
                                      onChange={[Function]}
                                      placeholder="Re-enter password"
                                      required={true}
                                      type="password"
                                    />
                                  </div>,
                                  <p>
                                    <button
                                      className="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>,
                                ],
                                "onSubmit": [Function],
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "form",
                              "updateQueue": null,
                            },
                            "stateNode": <h3>
                              Authors Haven
                            </h3>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "h3",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "div",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <h3>
                                Authors Haven
                              </h3>,
                              <form
                                onSubmit={[Function]}
                              >
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />
                                  <span
                                    className="text-danger"
                                  />
                                </div>
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="confirmPassword"
                                    onChange={[Function]}
                                    placeholder="Re-enter password"
                                    required={true}
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    className="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>,
                            ],
                            "className": "login-wrapper",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <h3>
                                Authors Haven
                              </h3>,
                              <form
                                onSubmit={[Function]}
                              >
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />
                                  <span
                                    className="text-danger"
                                  />
                                </div>
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="confirmPassword"
                                    onChange={[Function]}
                                    placeholder="Re-enter password"
                                    required={true}
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    className="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>,
                            ],
                            "className": "login-wrapper",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "stateNode": <img
                          alt="text"
                          class="login background-image"
                          src="background-image-3.jpg"
                        />,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "img",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <img
                            alt="text"
                            className="login background-image"
                            src="background-image-3.jpg"
                          />,
                          <div
                            className="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form
                              onSubmit={[Function]}
                            >
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Enter new password"
                                  required={true}
                                  type="password"
                                />
                                <span
                                  className="text-danger"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="confirmPassword"
                                  onChange={[Function]}
                                  placeholder="Re-enter password"
                                  required={true}
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  className="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>,
                        ],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <img
                            alt="text"
                            className="login background-image"
                            src="background-image-3.jpg"
                          />,
                          <div
                            className="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form
                              onSubmit={[Function]}
                            >
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Enter new password"
                                  required={true}
                                  type="password"
                                />
                                <span
                                  className="text-danger"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="confirmPassword"
                                  onChange={[Function]}
                                  placeholder="Re-enter password"
                                  required={true}
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  className="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>,
                        ],
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div>
                        <img
                          alt="text"
                          class="login background-image"
                          src="background-image-3.jpg"
                        />
                        <div
                          class="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <label
                                for="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="confirmPassword"
                                placeholder="Re-enter password"
                                required=""
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                class="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 1,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "onChange": [Function],
                      "onSubmit": [Function],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "onChange": [Function],
                      "onSubmit": [Function],
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 0,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <ChangeForm
                      onChange={[Function]}
                      onSubmit={[Function]}
                    />,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <ChangeForm
                      onChange={[Function]}
                      onSubmit={[Function]}
                    />,
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div>
                    <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "changePasswordAction": [Function],
                  "detail": undefined,
                  "history": Object {
                    "push": [MockFunction],
                  },
                  "match": Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  },
                  "message": "hello",
                  "resetPasswordAction": [Function],
                },
                "memoizedState": Object {
                  "confirmPassword": "",
                  "disabled": true,
                  "email": "",
                  "errors": Object {
                    "email": "",
                  },
                  "loader": Object {
                    "loading": false,
                  },
                  "password": "",
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "changePasswordAction": [Function],
                  "detail": undefined,
                  "history": Object {
                    "push": [MockFunction],
                  },
                  "match": Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  },
                  "message": "hello",
                  "resetPasswordAction": [Function],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": ResetPasswordView {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "handlePasswordSubmit": [Function],
                  "handleSubmit": [Function],
                  "onChange": [Function],
                  "props": Object {
                    "changePasswordAction": [Function],
                    "detail": undefined,
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "message": "hello",
                    "resetPasswordAction": [Function],
                  },
                  "refs": Object {},
                  "state": Object {
                    "confirmPassword": "",
                    "disabled": true,
                    "email": "",
                    "errors": Object {
                      "email": "",
                    },
                    "loader": Object {
                      "loading": false,
                    },
                    "password": "",
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                  "validateEmail": [Function],
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "contextDependencies": Object {
                "expirationTime": 0,
                "first": Object {
                  "context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": Object {
                      "$$typeof": Symbol(react.context),
                      "_calculateChangedBits": null,
                      "_context": [Circular],
                    },
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                  "next": null,
                  "observedBits": 1073741823,
                },
              },
              "effectTag": 1,
              "elementType": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": [Function],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": null,
              "tag": 9,
              "treeBaseDuration": 0,
              "type": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "changePasswordAction": [MockFunction],
              "history": Object {
                "push": [MockFunction],
              },
              "match": Object {
                "params": Object {
                  "token": "ghjkbvfghj",
                },
              },
              "resetPasswordAction": [MockFunction],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "changePasswordAction": [MockFunction],
              "history": Object {
                "push": [MockFunction],
              },
              "match": Object {
                "params": Object {
                  "token": "ghjkbvfghj",
                },
              },
              "resetPasswordAction": [MockFunction],
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Connect {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "indirectRenderWrappedComponent": [Function],
              "props": Object {
                "changePasswordAction": [MockFunction],
                "history": Object {
                  "push": [MockFunction],
                },
                "match": Object {
                  "params": Object {
                    "token": "ghjkbvfghj",
                  },
                },
                "resetPasswordAction": [MockFunction],
              },
              "refs": Object {},
              "selectChildElement": [Function],
              "selectDerivedProps": [Function],
              "state": null,
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 0,
          "elementType": Object {
            "$$typeof": Symbol(react.provider),
            "_context": Object {
              "$$typeof": Symbol(react.context),
              "Consumer": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": [Circular],
              },
              "Provider": [Circular],
              "_calculateChangedBits": null,
              "_currentRenderer": Object {},
              "_currentRenderer2": null,
              "_currentValue": null,
              "_currentValue2": null,
              "_threadCount": 0,
            },
          },
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": <Connect(ResetPasswordView)
              changePasswordAction={[MockFunction]}
              history={
                Object {
                  "push": [MockFunction],
                }
              }
              match={
                Object {
                  "params": Object {
                    "token": "ghjkbvfghj",
                  },
                }
              }
              resetPasswordAction={[MockFunction]}
            />,
            "value": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeState": Object {
                "resetPasswordReducer": Object {
                  "message": "hello",
                },
              },
            },
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": <Connect(ResetPasswordView)
              changePasswordAction={[MockFunction]}
              history={
                Object {
                  "push": [MockFunction],
                }
              }
              match={
                Object {
                  "params": Object {
                    "token": "ghjkbvfghj",
                  },
                }
              }
              resetPasswordAction={[MockFunction]}
            />,
            "value": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeState": Object {
                "resetPasswordReducer": Object {
                  "message": "hello",
                },
              },
            },
          },
          "ref": null,
          "return": [Circular],
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": null,
          "tag": 10,
          "treeBaseDuration": 0,
          "type": Object {
            "$$typeof": Symbol(react.provider),
            "_context": Object {
              "$$typeof": Symbol(react.context),
              "Consumer": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": [Circular],
              },
              "Provider": [Circular],
              "_calculateChangedBits": null,
              "_currentRenderer": Object {},
              "_currentRenderer2": null,
              "_currentValue": null,
              "_currentValue2": null,
              "_threadCount": 0,
            },
          },
          "updateQueue": null,
        },
        "childExpirationTime": 0,
        "contextDependencies": null,
        "effectTag": 5,
        "elementType": [Function],
        "expirationTime": 0,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {
          "children": <Connect(ResetPasswordView)
            changePasswordAction={[MockFunction]}
            history={
              Object {
                "push": [MockFunction],
              }
            }
            match={
              Object {
                "params": Object {
                  "token": "ghjkbvfghj",
                },
              }
            }
            resetPasswordAction={[MockFunction]}
          />,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        },
        "memoizedState": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "storeState": Object {
            "resetPasswordReducer": Object {
              "message": "hello",
            },
          },
        },
        "mode": 0,
        "nextEffect": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 62,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(ResetPasswordView)
                changePasswordAction={[MockFunction]}
                history={
                  Object {
                    "push": [MockFunction],
                  }
                }
                match={
                  Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  }
                }
                resetPasswordAction={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "wrappingComponentProps": null,
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "children": <Connect(ResetPasswordView)
                changePasswordAction={[MockFunction]}
                history={
                  Object {
                    "push": [MockFunction],
                  }
                }
                match={
                  Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  }
                }
                resetPasswordAction={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "wrappingComponentProps": null,
          },
          "mode": 0,
          "nextEffect": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 60,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 60,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                    <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 15,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  }
                }
                wrappingComponentProps={null}
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div>
                  <div>
                    <img
                      alt="text"
                      class="login background-image"
                      src="background-image-3.jpg"
                    />
                    <div
                      class="login-wrapper"
                    >
                      <h3>
                        Authors Haven
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <label
                            for="newpassword"
                          >
                            New Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="password"
                            placeholder="Enter new password"
                            required=""
                            type="password"
                          />
                          <span
                            class="text-danger"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <label
                            for="confirmpassword"
                          >
                            Confirm Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="confirmPassword"
                            placeholder="Re-enter password"
                            required=""
                            type="password"
                          />
                        </div>
                        <p>
                          <button
                            class="btn btn-primary"
                            id="login-button"
                          >
                            Change Password
                          </button>
                        </p>
                      </form>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 15,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                  wrappingComponentProps={null}
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(ResetPasswordView)
                changePasswordAction={[MockFunction]}
                history={
                  Object {
                    "push": [MockFunction],
                  }
                }
                match={
                  Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  }
                }
                resetPasswordAction={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "wrappingComponentProps": null,
          },
          "ref": null,
          "return": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 60,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 60,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                    <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 15,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  }
                }
                wrappingComponentProps={null}
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div>
                  <div>
                    <img
                      alt="text"
                      class="login background-image"
                      src="background-image-3.jpg"
                    />
                    <div
                      class="login-wrapper"
                    >
                      <h3>
                        Authors Haven
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <label
                            for="newpassword"
                          >
                            New Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="password"
                            placeholder="Enter new password"
                            required=""
                            type="password"
                          />
                          <span
                            class="text-danger"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <label
                            for="confirmpassword"
                          >
                            Confirm Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="confirmPassword"
                            placeholder="Re-enter password"
                            required=""
                            type="password"
                          />
                        </div>
                        <p>
                          <button
                            class="btn btn-primary"
                            id="login-button"
                          >
                            Change Password
                          </button>
                        </p>
                      </form>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 15,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                  wrappingComponentProps={null}
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "refs": Object {},
            "rootFinderInstance": null,
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "pendingProps": Object {
          "children": <Connect(ResetPasswordView)
            changePasswordAction={[MockFunction]}
            history={
              Object {
                "push": [MockFunction],
              }
            }
            match={
              Object {
                "params": Object {
                  "token": "ghjkbvfghj",
                },
              }
            }
            resetPasswordAction={[MockFunction]}
          />,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        },
        "ref": null,
        "return": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 62,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(ResetPasswordView)
                changePasswordAction={[MockFunction]}
                history={
                  Object {
                    "push": [MockFunction],
                  }
                }
                match={
                  Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  }
                }
                resetPasswordAction={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "wrappingComponentProps": null,
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "children": <Connect(ResetPasswordView)
                changePasswordAction={[MockFunction]}
                history={
                  Object {
                    "push": [MockFunction],
                  }
                }
                match={
                  Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  }
                }
                resetPasswordAction={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "wrappingComponentProps": null,
          },
          "mode": 0,
          "nextEffect": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 60,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 60,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                    <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 15,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  }
                }
                wrappingComponentProps={null}
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div>
                  <div>
                    <img
                      alt="text"
                      class="login background-image"
                      src="background-image-3.jpg"
                    />
                    <div
                      class="login-wrapper"
                    >
                      <h3>
                        Authors Haven
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <label
                            for="newpassword"
                          >
                            New Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="password"
                            placeholder="Enter new password"
                            required=""
                            type="password"
                          />
                          <span
                            class="text-danger"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <label
                            for="confirmpassword"
                          >
                            Confirm Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="confirmPassword"
                            placeholder="Re-enter password"
                            required=""
                            type="password"
                          />
                        </div>
                        <p>
                          <button
                            class="btn btn-primary"
                            id="login-button"
                          >
                            Change Password
                          </button>
                        </p>
                      </form>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 15,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                  wrappingComponentProps={null}
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(ResetPasswordView)
                changePasswordAction={[MockFunction]}
                history={
                  Object {
                    "push": [MockFunction],
                  }
                }
                match={
                  Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  }
                }
                resetPasswordAction={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "wrappingComponentProps": null,
          },
          "ref": null,
          "return": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 60,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 60,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                    <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 15,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  }
                }
                wrappingComponentProps={null}
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div>
                  <div>
                    <img
                      alt="text"
                      class="login background-image"
                      src="background-image-3.jpg"
                    />
                    <div
                      class="login-wrapper"
                    >
                      <h3>
                        Authors Haven
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <label
                            for="newpassword"
                          >
                            New Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="password"
                            placeholder="Enter new password"
                            required=""
                            type="password"
                          />
                          <span
                            class="text-danger"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <label
                            for="confirmpassword"
                          >
                            Confirm Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="confirmPassword"
                            placeholder="Re-enter password"
                            required=""
                            type="password"
                          />
                        </div>
                        <p>
                          <button
                            class="btn btn-primary"
                            id="login-button"
                          >
                            Change Password
                          </button>
                        </p>
                      </form>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 15,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                  wrappingComponentProps={null}
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "refs": Object {},
            "rootFinderInstance": null,
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "selfBaseDuration": 0,
        "sibling": null,
        "stateNode": [Circular],
        "tag": 1,
        "treeBaseDuration": 0,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "props": Object {
        "children": <Connect(ResetPasswordView)
          changePasswordAction={[MockFunction]}
          history={
            Object {
              "push": [MockFunction],
            }
          }
          match={
            Object {
              "params": Object {
                "token": "ghjkbvfghj",
              },
            }
          }
          resetPasswordAction={[MockFunction]}
        />,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "refs": Object {},
      "state": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "storeState": Object {
          "resetPasswordReducer": Object {
            "message": "hello",
          },
        },
      },
      "unsubscribe": [Function],
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Connect(ResetPasswordView)
        changePasswordAction={[MockFunction]}
        history={
          Object {
            "push": [MockFunction],
          }
        }
        match={
          Object {
            "params": Object {
              "token": "ghjkbvfghj",
            },
          }
        }
        resetPasswordAction={[MockFunction]}
      />,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": Connect {
        "_reactInternalFiber": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 65,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": Object {
            "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/__tests__/views/resetView/__test__/resetPasswordView.test.js",
            "lineNumber": 48,
          },
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 66,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 67,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 68,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/views/resetView/resetPasswordView.js",
                  "lineNumber": 102,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 69,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/views/resetView/resetPasswordView.js",
                    "lineNumber": 103,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 70,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                      "lineNumber": 6,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 71,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                        "lineNumber": 7,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": "img",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "alt": "text",
                        "className": "login background-image",
                        "src": "background-image-3.jpg",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "alt": "text",
                        "className": "login background-image",
                        "src": "background-image-3.jpg",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 72,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                          "lineNumber": 8,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 73,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                            "lineNumber": 9,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "h3",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Authors Haven",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Authors Haven",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 74,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                              "lineNumber": 11,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugHookTypes": null,
                              "_debugID": 75,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                "lineNumber": 13,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugHookTypes": null,
                                "_debugID": 78,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                  "lineNumber": 14,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "label",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": "New Password",
                                  "htmlFor": "newpassword",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": "New Password",
                                  "htmlFor": "newpassword",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugHookTypes": null,
                                  "_debugID": 79,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                    "lineNumber": 15,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "input",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 1,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "className": "form-control",
                                    "minLength": 8,
                                    "name": "password",
                                    "onChange": [Function],
                                    "placeholder": "Enter new password",
                                    "required": true,
                                    "type": "password",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "className": "form-control",
                                    "minLength": 8,
                                    "name": "password",
                                    "onChange": [Function],
                                    "placeholder": "Enter new password",
                                    "required": true,
                                    "type": "password",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugHookTypes": null,
                                    "_debugID": 80,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                      "lineNumber": 16,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "span",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 2,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": undefined,
                                      "className": "text-danger",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": undefined,
                                      "className": "text-danger",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <span
                                      class="text-danger"
                                    />,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "span",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "input",
                                  "updateQueue": null,
                                },
                                "stateNode": <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "label",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "div",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": Array [
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>,
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />,
                                  <span
                                    className="text-danger"
                                  />,
                                ],
                                "className": "form-group",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": Array [
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>,
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />,
                                  <span
                                    className="text-danger"
                                  />,
                                ],
                                "className": "form-group",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugHookTypes": null,
                                "_debugID": 76,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                  "lineNumber": 19,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugHookTypes": null,
                                  "_debugID": 81,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                    "lineNumber": 20,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "label",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": "Confirm Password",
                                    "htmlFor": "confirmpassword",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": "Confirm Password",
                                    "htmlFor": "confirmpassword",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugHookTypes": null,
                                    "_debugID": 82,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                      "lineNumber": 21,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "input",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 1,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "className": "form-control",
                                      "minLength": 8,
                                      "name": "confirmPassword",
                                      "onChange": [Function],
                                      "placeholder": "Re-enter password",
                                      "required": true,
                                      "type": "password",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "className": "form-control",
                                      "minLength": 8,
                                      "name": "confirmPassword",
                                      "onChange": [Function],
                                      "placeholder": "Re-enter password",
                                      "required": true,
                                      "type": "password",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "input",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "label",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "div",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": Array [
                                    <label
                                      htmlFor="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>,
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="confirmPassword"
                                      onChange={[Function]}
                                      placeholder="Re-enter password"
                                      required={true}
                                      type="password"
                                    />,
                                  ],
                                  "className": "form-group",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": Array [
                                    <label
                                      htmlFor="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>,
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="confirmPassword"
                                      onChange={[Function]}
                                      placeholder="Re-enter password"
                                      required={true}
                                      type="password"
                                    />,
                                  ],
                                  "className": "form-group",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugHookTypes": null,
                                  "_debugID": 77,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                    "lineNumber": 24,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": FiberNode {
                                    "_debugHookTypes": null,
                                    "_debugID": 83,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                      "lineNumber": 24,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "button",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 0,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": "Change Password",
                                      "className": "btn btn-primary",
                                      "id": "login-button",
                                      "onChange": undefined,
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": "Change Password",
                                      "className": "btn btn-primary",
                                      "id": "login-button",
                                      "onChange": undefined,
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "button",
                                    "updateQueue": null,
                                  },
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "p",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 2,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": <button
                                      className="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>,
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": <button
                                      className="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>,
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "p",
                                  "updateQueue": null,
                                },
                                "stateNode": <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "div",
                                "updateQueue": null,
                              },
                              "stateNode": <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "form",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />
                                  <span
                                    className="text-danger"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="confirmPassword"
                                    onChange={[Function]}
                                    placeholder="Re-enter password"
                                    required={true}
                                    type="password"
                                  />
                                </div>,
                                <p>
                                  <button
                                    className="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>,
                              ],
                              "onSubmit": [Function],
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />
                                  <span
                                    className="text-danger"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="confirmPassword"
                                    onChange={[Function]}
                                    placeholder="Re-enter password"
                                    required={true}
                                    type="password"
                                  />
                                </div>,
                                <p>
                                  <button
                                    className="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>,
                              ],
                              "onSubmit": [Function],
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "form",
                            "updateQueue": null,
                          },
                          "stateNode": <h3>
                            Authors Haven
                          </h3>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "h3",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "div",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <h3>
                              Authors Haven
                            </h3>,
                            <form
                              onSubmit={[Function]}
                            >
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Enter new password"
                                  required={true}
                                  type="password"
                                />
                                <span
                                  className="text-danger"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="confirmPassword"
                                  onChange={[Function]}
                                  placeholder="Re-enter password"
                                  required={true}
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  className="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>,
                          ],
                          "className": "login-wrapper",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <h3>
                              Authors Haven
                            </h3>,
                            <form
                              onSubmit={[Function]}
                            >
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Enter new password"
                                  required={true}
                                  type="password"
                                />
                                <span
                                  className="text-danger"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="confirmPassword"
                                  onChange={[Function]}
                                  placeholder="Re-enter password"
                                  required={true}
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  className="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>,
                          ],
                          "className": "login-wrapper",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <div
                          class="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <label
                                for="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="confirmPassword"
                                placeholder="Re-enter password"
                                required=""
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                class="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "stateNode": <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "img",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <img
                          alt="text"
                          className="login background-image"
                          src="background-image-3.jpg"
                        />,
                        <div
                          className="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form
                            onSubmit={[Function]}
                          >
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="password"
                                onChange={[Function]}
                                placeholder="Enter new password"
                                required={true}
                                type="password"
                              />
                              <span
                                className="text-danger"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="confirmPassword"
                                onChange={[Function]}
                                placeholder="Re-enter password"
                                required={true}
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                className="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>,
                      ],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <img
                          alt="text"
                          className="login background-image"
                          src="background-image-3.jpg"
                        />,
                        <div
                          className="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form
                            onSubmit={[Function]}
                          >
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="password"
                                onChange={[Function]}
                                placeholder="Enter new password"
                                required={true}
                                type="password"
                              />
                              <span
                                className="text-danger"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="confirmPassword"
                                onChange={[Function]}
                                placeholder="Re-enter password"
                                required={true}
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                className="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>,
                      ],
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "onChange": [Function],
                    "onSubmit": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "onChange": [Function],
                    "onSubmit": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": null,
                  "tag": 0,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": "div",
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <ChangeForm
                    onChange={[Function]}
                    onSubmit={[Function]}
                  />,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <ChangeForm
                    onChange={[Function]}
                    onSubmit={[Function]}
                  />,
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <div>
                  <div>
                    <img
                      alt="text"
                      class="login background-image"
                      src="background-image-3.jpg"
                    />
                    <div
                      class="login-wrapper"
                    >
                      <h3>
                        Authors Haven
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <label
                            for="newpassword"
                          >
                            New Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="password"
                            placeholder="Enter new password"
                            required=""
                            type="password"
                          />
                          <span
                            class="text-danger"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <label
                            for="confirmpassword"
                          >
                            Confirm Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="confirmPassword"
                            placeholder="Re-enter password"
                            required=""
                            type="password"
                          />
                        </div>
                        <p>
                          <button
                            class="btn btn-primary"
                            id="login-button"
                          >
                            Change Password
                          </button>
                        </p>
                      </form>
                    </div>
                  </div>
                </div>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "changePasswordAction": [Function],
                "detail": undefined,
                "history": Object {
                  "push": [MockFunction],
                },
                "match": Object {
                  "params": Object {
                    "token": "ghjkbvfghj",
                  },
                },
                "message": "hello",
                "resetPasswordAction": [Function],
              },
              "memoizedState": Object {
                "confirmPassword": "",
                "disabled": true,
                "email": "",
                "errors": Object {
                  "email": "",
                },
                "loader": Object {
                  "loading": false,
                },
                "password": "",
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "changePasswordAction": [Function],
                "detail": undefined,
                "history": Object {
                  "push": [MockFunction],
                },
                "match": Object {
                  "params": Object {
                    "token": "ghjkbvfghj",
                  },
                },
                "message": "hello",
                "resetPasswordAction": [Function],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": ResetPasswordView {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "handlePasswordSubmit": [Function],
                "handleSubmit": [Function],
                "onChange": [Function],
                "props": Object {
                  "changePasswordAction": [Function],
                  "detail": undefined,
                  "history": Object {
                    "push": [MockFunction],
                  },
                  "match": Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  },
                  "message": "hello",
                  "resetPasswordAction": [Function],
                },
                "refs": Object {},
                "state": Object {
                  "confirmPassword": "",
                  "disabled": true,
                  "email": "",
                  "errors": Object {
                    "email": "",
                  },
                  "loader": Object {
                    "loading": false,
                  },
                  "password": "",
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
                "validateEmail": [Function],
              },
              "tag": 1,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "contextDependencies": Object {
              "expirationTime": 0,
              "first": Object {
                "context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": Object {
                    "$$typeof": Symbol(react.context),
                    "_calculateChangedBits": null,
                    "_context": [Circular],
                  },
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
                "next": null,
                "observedBits": 1073741823,
              },
            },
            "effectTag": 1,
            "elementType": Object {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": Object {
                "$$typeof": Symbol(react.context),
                "Consumer": [Circular],
                "Provider": Object {
                  "$$typeof": Symbol(react.provider),
                  "_context": [Circular],
                },
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              },
            },
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": [Function],
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": null,
            "tag": 9,
            "treeBaseDuration": 0,
            "type": Object {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": Object {
                "$$typeof": Symbol(react.context),
                "Consumer": [Circular],
                "Provider": Object {
                  "$$typeof": Symbol(react.provider),
                  "_context": [Circular],
                },
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              },
            },
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "changePasswordAction": [MockFunction],
            "history": Object {
              "push": [MockFunction],
            },
            "match": Object {
              "params": Object {
                "token": "ghjkbvfghj",
              },
            },
            "resetPasswordAction": [MockFunction],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "changePasswordAction": [MockFunction],
            "history": Object {
              "push": [MockFunction],
            },
            "match": Object {
              "params": Object {
                "token": "ghjkbvfghj",
              },
            },
            "resetPasswordAction": [MockFunction],
          },
          "ref": null,
          "return": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 64,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 63,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 62,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div>
                        <div>
                          <img
                            alt="text"
                            class="login background-image"
                            src="background-image-3.jpg"
                          />
                          <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 15,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div>
                        <div>
                          <img
                            alt="text"
                            class="login background-image"
                            src="background-image-3.jpg"
                          />
                          <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 15,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "refs": Object {},
                  "rootFinderInstance": null,
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 5,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "memoizedState": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeState": Object {
                  "resetPasswordReducer": Object {
                    "message": "hello",
                  },
                },
              },
              "mode": 0,
              "nextEffect": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 62,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div>
                        <div>
                          <img
                            alt="text"
                            class="login background-image"
                            src="background-image-3.jpg"
                          />
                          <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 15,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div>
                        <div>
                          <img
                            alt="text"
                            class="login background-image"
                            src="background-image-3.jpg"
                          />
                          <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 15,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "refs": Object {},
                  "rootFinderInstance": null,
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "pendingProps": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 62,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div>
                        <div>
                          <img
                            alt="text"
                            class="login background-image"
                            src="background-image-3.jpg"
                          />
                          <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 15,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div>
                        <div>
                          <img
                            alt="text"
                            class="login background-image"
                            src="background-image-3.jpg"
                          />
                          <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 15,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "refs": Object {},
                  "rootFinderInstance": null,
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Provider {
                "_isMounted": true,
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "children": <Connect(ResetPasswordView)
                    changePasswordAction={[MockFunction]}
                    history={
                      Object {
                        "push": [MockFunction],
                      }
                    }
                    match={
                      Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      }
                    }
                    resetPasswordAction={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "refs": Object {},
                "state": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeState": Object {
                    "resetPasswordReducer": Object {
                      "message": "hello",
                    },
                  },
                },
                "unsubscribe": [Function],
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 0,
            "elementType": Object {
              "$$typeof": Symbol(react.provider),
              "_context": Object {
                "$$typeof": Symbol(react.context),
                "Consumer": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": [Circular],
                },
                "Provider": [Circular],
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              },
            },
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": <Connect(ResetPasswordView)
                changePasswordAction={[MockFunction]}
                history={
                  Object {
                    "push": [MockFunction],
                  }
                }
                match={
                  Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  }
                }
                resetPasswordAction={[MockFunction]}
              />,
              "value": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeState": Object {
                  "resetPasswordReducer": Object {
                    "message": "hello",
                  },
                },
              },
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": <Connect(ResetPasswordView)
                changePasswordAction={[MockFunction]}
                history={
                  Object {
                    "push": [MockFunction],
                  }
                }
                match={
                  Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  }
                }
                resetPasswordAction={[MockFunction]}
              />,
              "value": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeState": Object {
                  "resetPasswordReducer": Object {
                    "message": "hello",
                  },
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 63,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 62,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div>
                        <div>
                          <img
                            alt="text"
                            class="login background-image"
                            src="background-image-3.jpg"
                          />
                          <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 15,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div>
                        <div>
                          <img
                            alt="text"
                            class="login background-image"
                            src="background-image-3.jpg"
                          />
                          <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 15,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "refs": Object {},
                  "rootFinderInstance": null,
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 5,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "memoizedState": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeState": Object {
                  "resetPasswordReducer": Object {
                    "message": "hello",
                  },
                },
              },
              "mode": 0,
              "nextEffect": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 62,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div>
                        <div>
                          <img
                            alt="text"
                            class="login background-image"
                            src="background-image-3.jpg"
                          />
                          <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 15,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div>
                        <div>
                          <img
                            alt="text"
                            class="login background-image"
                            src="background-image-3.jpg"
                          />
                          <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 15,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "refs": Object {},
                  "rootFinderInstance": null,
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "pendingProps": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 62,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div>
                        <div>
                          <img
                            alt="text"
                            class="login background-image"
                            src="background-image-3.jpg"
                          />
                          <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 15,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "wrappingComponentProps": null,
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div>
                        <div>
                          <img
                            alt="text"
                            class="login background-image"
                            src="background-image-3.jpg"
                          />
                          <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 15,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "refs": Object {},
                  "rootFinderInstance": null,
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Provider {
                "_isMounted": true,
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "children": <Connect(ResetPasswordView)
                    changePasswordAction={[MockFunction]}
                    history={
                      Object {
                        "push": [MockFunction],
                      }
                    }
                    match={
                      Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      }
                    }
                    resetPasswordAction={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "refs": Object {},
                "state": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeState": Object {
                    "resetPasswordReducer": Object {
                      "message": "hello",
                    },
                  },
                },
                "unsubscribe": [Function],
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": null,
            "tag": 10,
            "treeBaseDuration": 0,
            "type": Object {
              "$$typeof": Symbol(react.provider),
              "_context": Object {
                "$$typeof": Symbol(react.context),
                "Consumer": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": [Circular],
                },
                "Provider": [Circular],
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              },
            },
            "updateQueue": null,
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "indirectRenderWrappedComponent": [Function],
        "props": Object {
          "changePasswordAction": [MockFunction],
          "history": Object {
            "push": [MockFunction],
          },
          "match": Object {
            "params": Object {
              "token": "ghjkbvfghj",
            },
          },
          "resetPasswordAction": [MockFunction],
        },
        "refs": Object {},
        "selectChildElement": [Function],
        "selectDerivedProps": [Function],
        "state": null,
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "changePasswordAction": [MockFunction],
        "history": Object {
          "push": [MockFunction],
        },
        "match": Object {
          "params": Object {
            "token": "ghjkbvfghj",
          },
        },
        "resetPasswordAction": [MockFunction],
      },
      "ref": null,
      "rendered": Object {
        "instance": ResetPasswordView {
          "_reactInternalFiber": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 67,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 66,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 65,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": Object {
                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/__tests__/views/resetView/__test__/resetPasswordView.test.js",
                  "lineNumber": 48,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "changePasswordAction": [MockFunction],
                  "history": Object {
                    "push": [MockFunction],
                  },
                  "match": Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  },
                  "resetPasswordAction": [MockFunction],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "changePasswordAction": [MockFunction],
                  "history": Object {
                    "push": [MockFunction],
                  },
                  "match": Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  },
                  "resetPasswordAction": [MockFunction],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 64,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 63,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 63,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": null,
                  "tag": 10,
                  "treeBaseDuration": 0,
                  "type": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Connect {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "indirectRenderWrappedComponent": [Function],
                  "props": Object {
                    "changePasswordAction": [MockFunction],
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "resetPasswordAction": [MockFunction],
                  },
                  "refs": Object {},
                  "selectChildElement": [Function],
                  "selectDerivedProps": [Function],
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": Object {
                "expirationTime": 0,
                "first": Object {
                  "context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": Object {
                      "$$typeof": Symbol(react.context),
                      "_calculateChangedBits": null,
                      "_context": [Circular],
                    },
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                  "next": null,
                  "observedBits": 1073741823,
                },
              },
              "effectTag": 1,
              "elementType": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": [Function],
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 65,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": Object {
                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/__tests__/views/resetView/__test__/resetPasswordView.test.js",
                  "lineNumber": 48,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "changePasswordAction": [MockFunction],
                  "history": Object {
                    "push": [MockFunction],
                  },
                  "match": Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  },
                  "resetPasswordAction": [MockFunction],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "changePasswordAction": [MockFunction],
                  "history": Object {
                    "push": [MockFunction],
                  },
                  "match": Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  },
                  "resetPasswordAction": [MockFunction],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 64,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 63,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 63,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": null,
                  "tag": 10,
                  "treeBaseDuration": 0,
                  "type": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Connect {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "indirectRenderWrappedComponent": [Function],
                  "props": Object {
                    "changePasswordAction": [MockFunction],
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "resetPasswordAction": [MockFunction],
                  },
                  "refs": Object {},
                  "selectChildElement": [Function],
                  "selectDerivedProps": [Function],
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": null,
              "tag": 9,
              "treeBaseDuration": 0,
              "type": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "updateQueue": null,
            },
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 68,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/views/resetView/resetPasswordView.js",
                "lineNumber": 102,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 69,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/views/resetView/resetPasswordView.js",
                  "lineNumber": 103,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 70,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                    "lineNumber": 6,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 71,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                      "lineNumber": 7,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": "img",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "alt": "text",
                      "className": "login background-image",
                      "src": "background-image-3.jpg",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "alt": "text",
                      "className": "login background-image",
                      "src": "background-image-3.jpg",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 72,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                        "lineNumber": 8,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 73,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                          "lineNumber": 9,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "h3",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Authors Haven",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Authors Haven",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 74,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                            "lineNumber": 11,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 75,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                              "lineNumber": 13,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugHookTypes": null,
                              "_debugID": 78,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                "lineNumber": 14,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "label",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": "New Password",
                                "htmlFor": "newpassword",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": "New Password",
                                "htmlFor": "newpassword",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugHookTypes": null,
                                "_debugID": 79,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                  "lineNumber": 15,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "input",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "form-control",
                                  "minLength": 8,
                                  "name": "password",
                                  "onChange": [Function],
                                  "placeholder": "Enter new password",
                                  "required": true,
                                  "type": "password",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "form-control",
                                  "minLength": 8,
                                  "name": "password",
                                  "onChange": [Function],
                                  "placeholder": "Enter new password",
                                  "required": true,
                                  "type": "password",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugHookTypes": null,
                                  "_debugID": 80,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                    "lineNumber": 16,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "span",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 2,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": undefined,
                                    "className": "text-danger",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": undefined,
                                    "className": "text-danger",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <span
                                    class="text-danger"
                                  />,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "span",
                                  "updateQueue": null,
                                },
                                "stateNode": <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "input",
                                "updateQueue": null,
                              },
                              "stateNode": <label
                                for="newpassword"
                              >
                                New Password
                              </label>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "label",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "div",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                <label
                                  htmlFor="newpassword"
                                >
                                  New Password
                                </label>,
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Enter new password"
                                  required={true}
                                  type="password"
                                />,
                                <span
                                  className="text-danger"
                                />,
                              ],
                              "className": "form-group",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                <label
                                  htmlFor="newpassword"
                                >
                                  New Password
                                </label>,
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Enter new password"
                                  required={true}
                                  type="password"
                                />,
                                <span
                                  className="text-danger"
                                />,
                              ],
                              "className": "form-group",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugHookTypes": null,
                              "_debugID": 76,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                "lineNumber": 19,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugHookTypes": null,
                                "_debugID": 81,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                  "lineNumber": 20,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "label",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": "Confirm Password",
                                  "htmlFor": "confirmpassword",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": "Confirm Password",
                                  "htmlFor": "confirmpassword",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugHookTypes": null,
                                  "_debugID": 82,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                    "lineNumber": 21,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "input",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 1,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "className": "form-control",
                                    "minLength": 8,
                                    "name": "confirmPassword",
                                    "onChange": [Function],
                                    "placeholder": "Re-enter password",
                                    "required": true,
                                    "type": "password",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "className": "form-control",
                                    "minLength": 8,
                                    "name": "confirmPassword",
                                    "onChange": [Function],
                                    "placeholder": "Re-enter password",
                                    "required": true,
                                    "type": "password",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "input",
                                  "updateQueue": null,
                                },
                                "stateNode": <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "label",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "div",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": Array [
                                  <label
                                    htmlFor="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>,
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="confirmPassword"
                                    onChange={[Function]}
                                    placeholder="Re-enter password"
                                    required={true}
                                    type="password"
                                  />,
                                ],
                                "className": "form-group",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": Array [
                                  <label
                                    htmlFor="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>,
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="confirmPassword"
                                    onChange={[Function]}
                                    placeholder="Re-enter password"
                                    required={true}
                                    type="password"
                                  />,
                                ],
                                "className": "form-group",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugHookTypes": null,
                                "_debugID": 77,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                  "lineNumber": 24,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugHookTypes": null,
                                  "_debugID": 83,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                    "lineNumber": 24,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "button",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": "Change Password",
                                    "className": "btn btn-primary",
                                    "id": "login-button",
                                    "onChange": undefined,
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": "Change Password",
                                    "className": "btn btn-primary",
                                    "id": "login-button",
                                    "onChange": undefined,
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "button",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "p",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 2,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": <button
                                    className="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>,
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": <button
                                    className="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>,
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "p",
                                "updateQueue": null,
                              },
                              "stateNode": <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "stateNode": <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "form",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Enter new password"
                                  required={true}
                                  type="password"
                                />
                                <span
                                  className="text-danger"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="confirmPassword"
                                  onChange={[Function]}
                                  placeholder="Re-enter password"
                                  required={true}
                                  type="password"
                                />
                              </div>,
                              <p>
                                <button
                                  className="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>,
                            ],
                            "onSubmit": [Function],
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Enter new password"
                                  required={true}
                                  type="password"
                                />
                                <span
                                  className="text-danger"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="confirmPassword"
                                  onChange={[Function]}
                                  placeholder="Re-enter password"
                                  required={true}
                                  type="password"
                                />
                              </div>,
                              <p>
                                <button
                                  className="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>,
                            ],
                            "onSubmit": [Function],
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <form>
                            <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <label
                                for="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="confirmPassword"
                                placeholder="Re-enter password"
                                required=""
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                class="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "form",
                          "updateQueue": null,
                        },
                        "stateNode": <h3>
                          Authors Haven
                        </h3>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "h3",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <h3>
                            Authors Haven
                          </h3>,
                          <form
                            onSubmit={[Function]}
                          >
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="password"
                                onChange={[Function]}
                                placeholder="Enter new password"
                                required={true}
                                type="password"
                              />
                              <span
                                className="text-danger"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="confirmPassword"
                                onChange={[Function]}
                                placeholder="Re-enter password"
                                required={true}
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                className="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>,
                        ],
                        "className": "login-wrapper",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <h3>
                            Authors Haven
                          </h3>,
                          <form
                            onSubmit={[Function]}
                          >
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="password"
                                onChange={[Function]}
                                placeholder="Enter new password"
                                required={true}
                                type="password"
                              />
                              <span
                                className="text-danger"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="confirmPassword"
                                onChange={[Function]}
                                placeholder="Re-enter password"
                                required={true}
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                className="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>,
                        ],
                        "className": "login-wrapper",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <img
                      alt="text"
                      class="login background-image"
                      src="background-image-3.jpg"
                    />,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "img",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <img
                        alt="text"
                        className="login background-image"
                        src="background-image-3.jpg"
                      />,
                      <div
                        className="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form
                          onSubmit={[Function]}
                        >
                          <div
                            className="form-group"
                          >
                            <label
                              htmlFor="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              className="form-control"
                              minLength={8}
                              name="password"
                              onChange={[Function]}
                              placeholder="Enter new password"
                              required={true}
                              type="password"
                            />
                            <span
                              className="text-danger"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <label
                              htmlFor="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              className="form-control"
                              minLength={8}
                              name="confirmPassword"
                              onChange={[Function]}
                              placeholder="Re-enter password"
                              required={true}
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              className="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>,
                    ],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <img
                        alt="text"
                        className="login background-image"
                        src="background-image-3.jpg"
                      />,
                      <div
                        className="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form
                          onSubmit={[Function]}
                        >
                          <div
                            className="form-group"
                          >
                            <label
                              htmlFor="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              className="form-control"
                              minLength={8}
                              name="password"
                              onChange={[Function]}
                              placeholder="Enter new password"
                              required={true}
                              type="password"
                            />
                            <span
                              className="text-danger"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <label
                              htmlFor="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              className="form-control"
                              minLength={8}
                              name="confirmPassword"
                              onChange={[Function]}
                              placeholder="Re-enter password"
                              required={true}
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              className="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>,
                    ],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div>
                    <img
                      alt="text"
                      class="login background-image"
                      src="background-image-3.jpg"
                    />
                    <div
                      class="login-wrapper"
                    >
                      <h3>
                        Authors Haven
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <label
                            for="newpassword"
                          >
                            New Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="password"
                            placeholder="Enter new password"
                            required=""
                            type="password"
                          />
                          <span
                            class="text-danger"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <label
                            for="confirmpassword"
                          >
                            Confirm Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="confirmPassword"
                            placeholder="Re-enter password"
                            required=""
                            type="password"
                          />
                        </div>
                        <p>
                          <button
                            class="btn btn-primary"
                            id="login-button"
                          >
                            Change Password
                          </button>
                        </p>
                      </form>
                    </div>
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "onChange": [Function],
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "onChange": [Function],
                  "onSubmit": [Function],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": null,
                "tag": 0,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": "div",
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": <ChangeForm
                  onChange={[Function]}
                  onSubmit={[Function]}
                />,
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <ChangeForm
                  onChange={[Function]}
                  onSubmit={[Function]}
                />,
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <div>
                <div>
                  <img
                    alt="text"
                    class="login background-image"
                    src="background-image-3.jpg"
                  />
                  <div
                    class="login-wrapper"
                  >
                    <h3>
                      Authors Haven
                    </h3>
                    <form>
                      <div
                        class="form-group"
                      >
                        <label
                          for="newpassword"
                        >
                          New Password
                        </label>
                        <input
                          class="form-control"
                          minlength="8"
                          name="password"
                          placeholder="Enter new password"
                          required=""
                          type="password"
                        />
                        <span
                          class="text-danger"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <label
                          for="confirmpassword"
                        >
                          Confirm Password
                        </label>
                        <input
                          class="form-control"
                          minlength="8"
                          name="confirmPassword"
                          placeholder="Re-enter password"
                          required=""
                          type="password"
                        />
                      </div>
                      <p>
                        <button
                          class="btn btn-primary"
                          id="login-button"
                        >
                          Change Password
                        </button>
                      </p>
                    </form>
                  </div>
                </div>
              </div>,
              "tag": 5,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "changePasswordAction": [Function],
              "detail": undefined,
              "history": Object {
                "push": [MockFunction],
              },
              "match": Object {
                "params": Object {
                  "token": "ghjkbvfghj",
                },
              },
              "message": "hello",
              "resetPasswordAction": [Function],
            },
            "memoizedState": Object {
              "confirmPassword": "",
              "disabled": true,
              "email": "",
              "errors": Object {
                "email": "",
              },
              "loader": Object {
                "loading": false,
              },
              "password": "",
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "changePasswordAction": [Function],
              "detail": undefined,
              "history": Object {
                "push": [MockFunction],
              },
              "match": Object {
                "params": Object {
                  "token": "ghjkbvfghj",
                },
              },
              "message": "hello",
              "resetPasswordAction": [Function],
            },
            "ref": null,
            "return": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 66,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 65,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": Object {
                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/__tests__/views/resetView/__test__/resetPasswordView.test.js",
                  "lineNumber": 48,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "changePasswordAction": [MockFunction],
                  "history": Object {
                    "push": [MockFunction],
                  },
                  "match": Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  },
                  "resetPasswordAction": [MockFunction],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "changePasswordAction": [MockFunction],
                  "history": Object {
                    "push": [MockFunction],
                  },
                  "match": Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  },
                  "resetPasswordAction": [MockFunction],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 64,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 63,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 63,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": null,
                  "tag": 10,
                  "treeBaseDuration": 0,
                  "type": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Connect {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "indirectRenderWrappedComponent": [Function],
                  "props": Object {
                    "changePasswordAction": [MockFunction],
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "resetPasswordAction": [MockFunction],
                  },
                  "refs": Object {},
                  "selectChildElement": [Function],
                  "selectDerivedProps": [Function],
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": Object {
                "expirationTime": 0,
                "first": Object {
                  "context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": Object {
                      "$$typeof": Symbol(react.context),
                      "_calculateChangedBits": null,
                      "_context": [Circular],
                    },
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                  "next": null,
                  "observedBits": 1073741823,
                },
              },
              "effectTag": 1,
              "elementType": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": [Function],
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 65,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": Object {
                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/__tests__/views/resetView/__test__/resetPasswordView.test.js",
                  "lineNumber": 48,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "changePasswordAction": [MockFunction],
                  "history": Object {
                    "push": [MockFunction],
                  },
                  "match": Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  },
                  "resetPasswordAction": [MockFunction],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "changePasswordAction": [MockFunction],
                  "history": Object {
                    "push": [MockFunction],
                  },
                  "match": Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  },
                  "resetPasswordAction": [MockFunction],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 64,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 63,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 63,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "resetPasswordReducer": Object {
                          "message": "hello",
                        },
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 60,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(ResetPasswordView)
                                        changePasswordAction={[MockFunction]}
                                        history={
                                          Object {
                                            "push": [MockFunction],
                                          }
                                        }
                                        match={
                                          Object {
                                            "params": Object {
                                              "token": "ghjkbvfghj",
                                            },
                                          }
                                        }
                                        resetPasswordAction={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                  wrappingComponentProps={null}
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(ResetPasswordView)
                                  changePasswordAction={[MockFunction]}
                                  history={
                                    Object {
                                      "push": [MockFunction],
                                    }
                                  }
                                  match={
                                    Object {
                                      "params": Object {
                                        "token": "ghjkbvfghj",
                                      },
                                    }
                                  }
                                  resetPasswordAction={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div>
                              <div>
                                <img
                                  alt="text"
                                  class="login background-image"
                                  src="background-image-3.jpg"
                                />
                                <div
                                  class="login-wrapper"
                                >
                                  <h3>
                                    Authors Haven
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />
                                      <span
                                        class="text-danger"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>
                                    <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 15,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "rootFinderInstance": null,
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": null,
                  "tag": 10,
                  "treeBaseDuration": 0,
                  "type": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Connect {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "indirectRenderWrappedComponent": [Function],
                  "props": Object {
                    "changePasswordAction": [MockFunction],
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "resetPasswordAction": [MockFunction],
                  },
                  "refs": Object {},
                  "selectChildElement": [Function],
                  "selectDerivedProps": [Function],
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": null,
              "tag": 9,
              "treeBaseDuration": 0,
              "type": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": [Circular],
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_reactInternalInstance": Object {},
          "context": Object {},
          "handlePasswordSubmit": [Function],
          "handleSubmit": [Function],
          "onChange": [Function],
          "props": Object {
            "changePasswordAction": [Function],
            "detail": undefined,
            "history": Object {
              "push": [MockFunction],
            },
            "match": Object {
              "params": Object {
                "token": "ghjkbvfghj",
              },
            },
            "message": "hello",
            "resetPasswordAction": [Function],
          },
          "refs": Object {},
          "state": Object {
            "confirmPassword": "",
            "disabled": true,
            "email": "",
            "errors": Object {
              "email": "",
            },
            "loader": Object {
              "loading": false,
            },
            "password": "",
          },
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
          "validateEmail": [Function],
        },
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "changePasswordAction": [Function],
          "detail": undefined,
          "history": Object {
            "push": [MockFunction],
          },
          "match": Object {
            "params": Object {
              "token": "ghjkbvfghj",
            },
          },
          "message": "hello",
          "resetPasswordAction": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": <div>
            <div>
              <img
                alt="text"
                class="login background-image"
                src="background-image-3.jpg"
              />
              <div
                class="login-wrapper"
              >
                <h3>
                  Authors Haven
                </h3>
                <form>
                  <div
                    class="form-group"
                  >
                    <label
                      for="newpassword"
                    >
                      New Password
                    </label>
                    <input
                      class="form-control"
                      minlength="8"
                      name="password"
                      placeholder="Enter new password"
                      required=""
                      type="password"
                    />
                    <span
                      class="text-danger"
                    />
                  </div>
                  <div
                    class="form-group"
                  >
                    <label
                      for="confirmpassword"
                    >
                      Confirm Password
                    </label>
                    <input
                      class="form-control"
                      minlength="8"
                      name="confirmPassword"
                      placeholder="Re-enter password"
                      required=""
                      type="password"
                    />
                  </div>
                  <p>
                    <button
                      class="btn btn-primary"
                      id="login-button"
                    >
                      Change Password
                    </button>
                  </p>
                </form>
              </div>
            </div>
          </div>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <ChangeForm
              onChange={[Function]}
              onSubmit={[Function]}
            />,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "onChange": [Function],
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": <div>
                  <img
                    alt="text"
                    class="login background-image"
                    src="background-image-3.jpg"
                  />
                  <div
                    class="login-wrapper"
                  >
                    <h3>
                      Authors Haven
                    </h3>
                    <form>
                      <div
                        class="form-group"
                      >
                        <label
                          for="newpassword"
                        >
                          New Password
                        </label>
                        <input
                          class="form-control"
                          minlength="8"
                          name="password"
                          placeholder="Enter new password"
                          required=""
                          type="password"
                        />
                        <span
                          class="text-danger"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <label
                          for="confirmpassword"
                        >
                          Confirm Password
                        </label>
                        <input
                          class="form-control"
                          minlength="8"
                          name="confirmPassword"
                          placeholder="Re-enter password"
                          required=""
                          type="password"
                        />
                      </div>
                      <p>
                        <button
                          class="btn btn-primary"
                          id="login-button"
                        >
                          Change Password
                        </button>
                      </p>
                    </form>
                  </div>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <img
                      alt="text"
                      className="login background-image"
                      src="background-image-3.jpg"
                    />,
                    <div
                      className="login-wrapper"
                    >
                      <h3>
                        Authors Haven
                      </h3>
                      <form
                        onSubmit={[Function]}
                      >
                        <div
                          className="form-group"
                        >
                          <label
                            htmlFor="newpassword"
                          >
                            New Password
                          </label>
                          <input
                            className="form-control"
                            minLength={8}
                            name="password"
                            onChange={[Function]}
                            placeholder="Enter new password"
                            required={true}
                            type="password"
                          />
                          <span
                            className="text-danger"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <label
                            htmlFor="confirmpassword"
                          >
                            Confirm Password
                          </label>
                          <input
                            className="form-control"
                            minLength={8}
                            name="confirmPassword"
                            onChange={[Function]}
                            placeholder="Re-enter password"
                            required={true}
                            type="password"
                          />
                        </div>
                        <p>
                          <button
                            className="btn btn-primary"
                            id="login-button"
                          >
                            Change Password
                          </button>
                        </p>
                      </form>
                    </div>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <img
                      alt="text"
                      class="login background-image"
                      src="background-image-3.jpg"
                    />,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "alt": "text",
                      "className": "login background-image",
                      "src": "background-image-3.jpg",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "img",
                  },
                  Object {
                    "instance": <div
                      class="login-wrapper"
                    >
                      <h3>
                        Authors Haven
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <label
                            for="newpassword"
                          >
                            New Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="password"
                            placeholder="Enter new password"
                            required=""
                            type="password"
                          />
                          <span
                            class="text-danger"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <label
                            for="confirmpassword"
                          >
                            Confirm Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="confirmPassword"
                            placeholder="Re-enter password"
                            required=""
                            type="password"
                          />
                        </div>
                        <p>
                          <button
                            class="btn btn-primary"
                            id="login-button"
                          >
                            Change Password
                          </button>
                        </p>
                      </form>
                    </div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <h3>
                          Authors Haven
                        </h3>,
                        <form
                          onSubmit={[Function]}
                        >
                          <div
                            className="form-group"
                          >
                            <label
                              htmlFor="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              className="form-control"
                              minLength={8}
                              name="password"
                              onChange={[Function]}
                              placeholder="Enter new password"
                              required={true}
                              type="password"
                            />
                            <span
                              className="text-danger"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <label
                              htmlFor="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              className="form-control"
                              minLength={8}
                              name="confirmPassword"
                              onChange={[Function]}
                              placeholder="Re-enter password"
                              required={true}
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              className="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>,
                      ],
                      "className": "login-wrapper",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": <h3>
                          Authors Haven
                        </h3>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Authors Haven",
                        },
                        "ref": null,
                        "rendered": Array [
                          "Authors Haven",
                        ],
                        "type": "h3",
                      },
                      Object {
                        "instance": <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="password"
                                onChange={[Function]}
                                placeholder="Enter new password"
                                required={true}
                                type="password"
                              />
                              <span
                                className="text-danger"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="confirmPassword"
                                onChange={[Function]}
                                placeholder="Re-enter password"
                                required={true}
                                type="password"
                              />
                            </div>,
                            <p>
                              <button
                                className="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>,
                          ],
                          "onSubmit": [Function],
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                <label
                                  htmlFor="newpassword"
                                >
                                  New Password
                                </label>,
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Enter new password"
                                  required={true}
                                  type="password"
                                />,
                                <span
                                  className="text-danger"
                                />,
                              ],
                              "className": "form-group",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "New Password",
                                  "htmlFor": "newpassword",
                                },
                                "ref": null,
                                "rendered": Array [
                                  "New Password",
                                ],
                                "type": "label",
                              },
                              Object {
                                "instance": <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "className": "form-control",
                                  "minLength": 8,
                                  "name": "password",
                                  "onChange": [Function],
                                  "placeholder": "Enter new password",
                                  "required": true,
                                  "type": "password",
                                },
                                "ref": null,
                                "rendered": Array [
                                  undefined,
                                ],
                                "type": "input",
                              },
                              Object {
                                "instance": <span
                                  class="text-danger"
                                />,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": undefined,
                                  "className": "text-danger",
                                },
                                "ref": null,
                                "rendered": Array [
                                  undefined,
                                ],
                                "type": "span",
                              },
                            ],
                            "type": "div",
                          },
                          Object {
                            "instance": <div
                              class="form-group"
                            >
                              <label
                                for="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="confirmPassword"
                                placeholder="Re-enter password"
                                required=""
                                type="password"
                              />
                            </div>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                <label
                                  htmlFor="confirmpassword"
                                >
                                  Confirm Password
                                </label>,
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="confirmPassword"
                                  onChange={[Function]}
                                  placeholder="Re-enter password"
                                  required={true}
                                  type="password"
                                />,
                              ],
                              "className": "form-group",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "Confirm Password",
                                  "htmlFor": "confirmpassword",
                                },
                                "ref": null,
                                "rendered": Array [
                                  "Confirm Password",
                                ],
                                "type": "label",
                              },
                              Object {
                                "instance": <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "className": "form-control",
                                  "minLength": 8,
                                  "name": "confirmPassword",
                                  "onChange": [Function],
                                  "placeholder": "Re-enter password",
                                  "required": true,
                                  "type": "password",
                                },
                                "ref": null,
                                "rendered": Array [
                                  undefined,
                                ],
                                "type": "input",
                              },
                            ],
                            "type": "div",
                          },
                          Object {
                            "instance": <p>
                              <button
                                class="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": <button
                                className="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>,
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "Change Password",
                                  "className": "btn btn-primary",
                                  "id": "login-button",
                                  "onChange": undefined,
                                },
                                "ref": null,
                                "rendered": Array [
                                  "Change Password",
                                ],
                                "type": "button",
                              },
                            ],
                            "type": "p",
                          },
                        ],
                        "type": "form",
                      },
                    ],
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": Provider {
        "_isMounted": true,
        "_reactInternalFiber": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 63,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 62,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "mode": 0,
            "nextEffect": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 60,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 60,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div>
                      <div>
                        <img
                          alt="text"
                          class="login background-image"
                          src="background-image-3.jpg"
                        />
                        <div
                          class="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <label
                                for="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="confirmPassword"
                                placeholder="Re-enter password"
                                required=""
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                class="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 15,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                  wrappingComponentProps={null}
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                    <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 15,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      }
                    }
                    wrappingComponentProps={null}
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "ref": null,
            "return": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 60,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 60,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div>
                      <div>
                        <img
                          alt="text"
                          class="login background-image"
                          src="background-image-3.jpg"
                        />
                        <div
                          class="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <label
                                for="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="confirmPassword"
                                placeholder="Re-enter password"
                                required=""
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                class="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 15,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                  wrappingComponentProps={null}
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                    <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 15,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      }
                    }
                    wrappingComponentProps={null}
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <Connect(ResetPasswordView)
                    changePasswordAction={[MockFunction]}
                    history={
                      Object {
                        "push": [MockFunction],
                      }
                    }
                    match={
                      Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      }
                    }
                    resetPasswordAction={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "wrappingComponentProps": null,
              },
              "refs": Object {},
              "rootFinderInstance": null,
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <Connect(ResetPasswordView)
                    changePasswordAction={[MockFunction]}
                    history={
                      Object {
                        "push": [MockFunction],
                      }
                    }
                    match={
                      Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      }
                    }
                    resetPasswordAction={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "wrappingComponentProps": null,
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 64,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 65,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": Object {
                "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/__tests__/views/resetView/__test__/resetPasswordView.test.js",
                "lineNumber": 48,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 66,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 67,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 68,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/views/resetView/resetPasswordView.js",
                      "lineNumber": 102,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 69,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/views/resetView/resetPasswordView.js",
                        "lineNumber": 103,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 70,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                          "lineNumber": 6,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 71,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                            "lineNumber": 7,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "img",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "alt": "text",
                            "className": "login background-image",
                            "src": "background-image-3.jpg",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "alt": "text",
                            "className": "login background-image",
                            "src": "background-image-3.jpg",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 72,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                              "lineNumber": 8,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugHookTypes": null,
                              "_debugID": 73,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                "lineNumber": 9,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "h3",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": "Authors Haven",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": "Authors Haven",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugHookTypes": null,
                                "_debugID": 74,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                  "lineNumber": 11,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugHookTypes": null,
                                  "_debugID": 75,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                    "lineNumber": 13,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": FiberNode {
                                    "_debugHookTypes": null,
                                    "_debugID": 78,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                      "lineNumber": 14,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "label",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 0,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": "New Password",
                                      "htmlFor": "newpassword",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": "New Password",
                                      "htmlFor": "newpassword",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": FiberNode {
                                      "_debugHookTypes": null,
                                      "_debugID": 79,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": Object {
                                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                        "lineNumber": 15,
                                      },
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "contextDependencies": null,
                                      "effectTag": 0,
                                      "elementType": "input",
                                      "expirationTime": 0,
                                      "firstEffect": null,
                                      "index": 1,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "className": "form-control",
                                        "minLength": 8,
                                        "name": "password",
                                        "onChange": [Function],
                                        "placeholder": "Enter new password",
                                        "required": true,
                                        "type": "password",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "className": "form-control",
                                        "minLength": 8,
                                        "name": "password",
                                        "onChange": [Function],
                                        "placeholder": "Enter new password",
                                        "required": true,
                                        "type": "password",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": FiberNode {
                                        "_debugHookTypes": null,
                                        "_debugID": 80,
                                        "_debugIsCurrentlyTiming": false,
                                        "_debugOwner": [Circular],
                                        "_debugSource": Object {
                                          "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                          "lineNumber": 16,
                                        },
                                        "actualDuration": 0,
                                        "actualStartTime": -1,
                                        "alternate": null,
                                        "child": null,
                                        "childExpirationTime": 0,
                                        "contextDependencies": null,
                                        "effectTag": 0,
                                        "elementType": "span",
                                        "expirationTime": 0,
                                        "firstEffect": null,
                                        "index": 2,
                                        "key": null,
                                        "lastEffect": null,
                                        "memoizedProps": Object {
                                          "children": undefined,
                                          "className": "text-danger",
                                        },
                                        "memoizedState": null,
                                        "mode": 0,
                                        "nextEffect": null,
                                        "pendingProps": Object {
                                          "children": undefined,
                                          "className": "text-danger",
                                        },
                                        "ref": null,
                                        "return": [Circular],
                                        "selfBaseDuration": 0,
                                        "sibling": null,
                                        "stateNode": <span
                                          class="text-danger"
                                        />,
                                        "tag": 5,
                                        "treeBaseDuration": 0,
                                        "type": "span",
                                        "updateQueue": null,
                                      },
                                      "stateNode": <input
                                        class="form-control"
                                        minlength="8"
                                        name="password"
                                        placeholder="Enter new password"
                                        required=""
                                        type="password"
                                      />,
                                      "tag": 5,
                                      "treeBaseDuration": 0,
                                      "type": "input",
                                      "updateQueue": null,
                                    },
                                    "stateNode": <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "label",
                                    "updateQueue": null,
                                  },
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "div",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": Array [
                                      <label
                                        htmlFor="newpassword"
                                      >
                                        New Password
                                      </label>,
                                      <input
                                        className="form-control"
                                        minLength={8}
                                        name="password"
                                        onChange={[Function]}
                                        placeholder="Enter new password"
                                        required={true}
                                        type="password"
                                      />,
                                      <span
                                        className="text-danger"
                                      />,
                                    ],
                                    "className": "form-group",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": Array [
                                      <label
                                        htmlFor="newpassword"
                                      >
                                        New Password
                                      </label>,
                                      <input
                                        className="form-control"
                                        minLength={8}
                                        name="password"
                                        onChange={[Function]}
                                        placeholder="Enter new password"
                                        required={true}
                                        type="password"
                                      />,
                                      <span
                                        className="text-danger"
                                      />,
                                    ],
                                    "className": "form-group",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugHookTypes": null,
                                    "_debugID": 76,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                      "lineNumber": 19,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": FiberNode {
                                      "_debugHookTypes": null,
                                      "_debugID": 81,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": Object {
                                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                        "lineNumber": 20,
                                      },
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "contextDependencies": null,
                                      "effectTag": 0,
                                      "elementType": "label",
                                      "expirationTime": 0,
                                      "firstEffect": null,
                                      "index": 0,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "children": "Confirm Password",
                                        "htmlFor": "confirmpassword",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "children": "Confirm Password",
                                        "htmlFor": "confirmpassword",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": FiberNode {
                                        "_debugHookTypes": null,
                                        "_debugID": 82,
                                        "_debugIsCurrentlyTiming": false,
                                        "_debugOwner": [Circular],
                                        "_debugSource": Object {
                                          "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                          "lineNumber": 21,
                                        },
                                        "actualDuration": 0,
                                        "actualStartTime": -1,
                                        "alternate": null,
                                        "child": null,
                                        "childExpirationTime": 0,
                                        "contextDependencies": null,
                                        "effectTag": 0,
                                        "elementType": "input",
                                        "expirationTime": 0,
                                        "firstEffect": null,
                                        "index": 1,
                                        "key": null,
                                        "lastEffect": null,
                                        "memoizedProps": Object {
                                          "className": "form-control",
                                          "minLength": 8,
                                          "name": "confirmPassword",
                                          "onChange": [Function],
                                          "placeholder": "Re-enter password",
                                          "required": true,
                                          "type": "password",
                                        },
                                        "memoizedState": null,
                                        "mode": 0,
                                        "nextEffect": null,
                                        "pendingProps": Object {
                                          "className": "form-control",
                                          "minLength": 8,
                                          "name": "confirmPassword",
                                          "onChange": [Function],
                                          "placeholder": "Re-enter password",
                                          "required": true,
                                          "type": "password",
                                        },
                                        "ref": null,
                                        "return": [Circular],
                                        "selfBaseDuration": 0,
                                        "sibling": null,
                                        "stateNode": <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />,
                                        "tag": 5,
                                        "treeBaseDuration": 0,
                                        "type": "input",
                                        "updateQueue": null,
                                      },
                                      "stateNode": <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>,
                                      "tag": 5,
                                      "treeBaseDuration": 0,
                                      "type": "label",
                                      "updateQueue": null,
                                    },
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "div",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 1,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": Array [
                                        <label
                                          htmlFor="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>,
                                        <input
                                          className="form-control"
                                          minLength={8}
                                          name="confirmPassword"
                                          onChange={[Function]}
                                          placeholder="Re-enter password"
                                          required={true}
                                          type="password"
                                        />,
                                      ],
                                      "className": "form-group",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": Array [
                                        <label
                                          htmlFor="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>,
                                        <input
                                          className="form-control"
                                          minLength={8}
                                          name="confirmPassword"
                                          onChange={[Function]}
                                          placeholder="Re-enter password"
                                          required={true}
                                          type="password"
                                        />,
                                      ],
                                      "className": "form-group",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": FiberNode {
                                      "_debugHookTypes": null,
                                      "_debugID": 77,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": Object {
                                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                        "lineNumber": 24,
                                      },
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": FiberNode {
                                        "_debugHookTypes": null,
                                        "_debugID": 83,
                                        "_debugIsCurrentlyTiming": false,
                                        "_debugOwner": [Circular],
                                        "_debugSource": Object {
                                          "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                          "lineNumber": 24,
                                        },
                                        "actualDuration": 0,
                                        "actualStartTime": -1,
                                        "alternate": null,
                                        "child": null,
                                        "childExpirationTime": 0,
                                        "contextDependencies": null,
                                        "effectTag": 0,
                                        "elementType": "button",
                                        "expirationTime": 0,
                                        "firstEffect": null,
                                        "index": 0,
                                        "key": null,
                                        "lastEffect": null,
                                        "memoizedProps": Object {
                                          "children": "Change Password",
                                          "className": "btn btn-primary",
                                          "id": "login-button",
                                          "onChange": undefined,
                                        },
                                        "memoizedState": null,
                                        "mode": 0,
                                        "nextEffect": null,
                                        "pendingProps": Object {
                                          "children": "Change Password",
                                          "className": "btn btn-primary",
                                          "id": "login-button",
                                          "onChange": undefined,
                                        },
                                        "ref": null,
                                        "return": [Circular],
                                        "selfBaseDuration": 0,
                                        "sibling": null,
                                        "stateNode": <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>,
                                        "tag": 5,
                                        "treeBaseDuration": 0,
                                        "type": "button",
                                        "updateQueue": null,
                                      },
                                      "childExpirationTime": 0,
                                      "contextDependencies": null,
                                      "effectTag": 0,
                                      "elementType": "p",
                                      "expirationTime": 0,
                                      "firstEffect": null,
                                      "index": 2,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "children": <button
                                          className="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>,
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "children": <button
                                          className="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>,
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": null,
                                      "stateNode": <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>,
                                      "tag": 5,
                                      "treeBaseDuration": 0,
                                      "type": "p",
                                      "updateQueue": null,
                                    },
                                    "stateNode": <div
                                      class="form-group"
                                    >
                                      <label
                                        for="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />
                                    </div>,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "div",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <div
                                    class="form-group"
                                  >
                                    <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />
                                    <span
                                      class="text-danger"
                                    />
                                  </div>,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "div",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "form",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": Array [
                                    <div
                                      className="form-group"
                                    >
                                      <label
                                        htmlFor="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        className="form-control"
                                        minLength={8}
                                        name="password"
                                        onChange={[Function]}
                                        placeholder="Enter new password"
                                        required={true}
                                        type="password"
                                      />
                                      <span
                                        className="text-danger"
                                      />
                                    </div>,
                                    <div
                                      className="form-group"
                                    >
                                      <label
                                        htmlFor="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        className="form-control"
                                        minLength={8}
                                        name="confirmPassword"
                                        onChange={[Function]}
                                        placeholder="Re-enter password"
                                        required={true}
                                        type="password"
                                      />
                                    </div>,
                                    <p>
                                      <button
                                        className="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>,
                                  ],
                                  "onSubmit": [Function],
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": Array [
                                    <div
                                      className="form-group"
                                    >
                                      <label
                                        htmlFor="newpassword"
                                      >
                                        New Password
                                      </label>
                                      <input
                                        className="form-control"
                                        minLength={8}
                                        name="password"
                                        onChange={[Function]}
                                        placeholder="Enter new password"
                                        required={true}
                                        type="password"
                                      />
                                      <span
                                        className="text-danger"
                                      />
                                    </div>,
                                    <div
                                      className="form-group"
                                    >
                                      <label
                                        htmlFor="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>
                                      <input
                                        className="form-control"
                                        minLength={8}
                                        name="confirmPassword"
                                        onChange={[Function]}
                                        placeholder="Re-enter password"
                                        required={true}
                                        type="password"
                                      />
                                    </div>,
                                    <p>
                                      <button
                                        className="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>,
                                  ],
                                  "onSubmit": [Function],
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <form>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />
                                    <span
                                      class="text-danger"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "form",
                                "updateQueue": null,
                              },
                              "stateNode": <h3>
                                Authors Haven
                              </h3>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "h3",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "div",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                <h3>
                                  Authors Haven
                                </h3>,
                                <form
                                  onSubmit={[Function]}
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <label
                                      htmlFor="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="password"
                                      onChange={[Function]}
                                      placeholder="Enter new password"
                                      required={true}
                                      type="password"
                                    />
                                    <span
                                      className="text-danger"
                                    />
                                  </div>
                                  <div
                                    className="form-group"
                                  >
                                    <label
                                      htmlFor="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="confirmPassword"
                                      onChange={[Function]}
                                      placeholder="Re-enter password"
                                      required={true}
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      className="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>,
                              ],
                              "className": "login-wrapper",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                <h3>
                                  Authors Haven
                                </h3>,
                                <form
                                  onSubmit={[Function]}
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <label
                                      htmlFor="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="password"
                                      onChange={[Function]}
                                      placeholder="Enter new password"
                                      required={true}
                                      type="password"
                                    />
                                    <span
                                      className="text-danger"
                                    />
                                  </div>
                                  <div
                                    className="form-group"
                                  >
                                    <label
                                      htmlFor="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="confirmPassword"
                                      onChange={[Function]}
                                      placeholder="Re-enter password"
                                      required={true}
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      className="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>,
                              ],
                              "className": "login-wrapper",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "stateNode": <img
                            alt="text"
                            class="login background-image"
                            src="background-image-3.jpg"
                          />,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "img",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "div",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <img
                              alt="text"
                              className="login background-image"
                              src="background-image-3.jpg"
                            />,
                            <div
                              className="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form
                                onSubmit={[Function]}
                              >
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />
                                  <span
                                    className="text-danger"
                                  />
                                </div>
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="confirmPassword"
                                    onChange={[Function]}
                                    placeholder="Re-enter password"
                                    required={true}
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    className="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>,
                          ],
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <img
                              alt="text"
                              className="login background-image"
                              src="background-image-3.jpg"
                            />,
                            <div
                              className="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form
                                onSubmit={[Function]}
                              >
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />
                                  <span
                                    className="text-danger"
                                  />
                                </div>
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="confirmPassword"
                                    onChange={[Function]}
                                    placeholder="Re-enter password"
                                    required={true}
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    className="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>,
                          ],
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <div>
                          <img
                            alt="text"
                            class="login background-image"
                            src="background-image-3.jpg"
                          />
                          <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>
                        </div>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "onChange": [Function],
                        "onSubmit": [Function],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "onChange": [Function],
                        "onSubmit": [Function],
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": null,
                      "tag": 0,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <ChangeForm
                        onChange={[Function]}
                        onSubmit={[Function]}
                      />,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <ChangeForm
                        onChange={[Function]}
                        onSubmit={[Function]}
                      />,
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div>
                      <div>
                        <img
                          alt="text"
                          class="login background-image"
                          src="background-image-3.jpg"
                        />
                        <div
                          class="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <label
                                for="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="confirmPassword"
                                placeholder="Re-enter password"
                                required=""
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                class="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>
                      </div>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "changePasswordAction": [Function],
                    "detail": undefined,
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "message": "hello",
                    "resetPasswordAction": [Function],
                  },
                  "memoizedState": Object {
                    "confirmPassword": "",
                    "disabled": true,
                    "email": "",
                    "errors": Object {
                      "email": "",
                    },
                    "loader": Object {
                      "loading": false,
                    },
                    "password": "",
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "changePasswordAction": [Function],
                    "detail": undefined,
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "message": "hello",
                    "resetPasswordAction": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": ResetPasswordView {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "handlePasswordSubmit": [Function],
                    "handleSubmit": [Function],
                    "onChange": [Function],
                    "props": Object {
                      "changePasswordAction": [Function],
                      "detail": undefined,
                      "history": Object {
                        "push": [MockFunction],
                      },
                      "match": Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      },
                      "message": "hello",
                      "resetPasswordAction": [Function],
                    },
                    "refs": Object {},
                    "state": Object {
                      "confirmPassword": "",
                      "disabled": true,
                      "email": "",
                      "errors": Object {
                        "email": "",
                      },
                      "loader": Object {
                        "loading": false,
                      },
                      "password": "",
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                    "validateEmail": [Function],
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "contextDependencies": Object {
                  "expirationTime": 0,
                  "first": Object {
                    "context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": Object {
                        "$$typeof": Symbol(react.provider),
                        "_context": [Circular],
                      },
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                    "next": null,
                    "observedBits": 1073741823,
                  },
                },
                "effectTag": 1,
                "elementType": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": [Circular],
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                },
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": [Function],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": null,
                "tag": 9,
                "treeBaseDuration": 0,
                "type": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": [Circular],
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                },
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "changePasswordAction": [MockFunction],
                "history": Object {
                  "push": [MockFunction],
                },
                "match": Object {
                  "params": Object {
                    "token": "ghjkbvfghj",
                  },
                },
                "resetPasswordAction": [MockFunction],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "changePasswordAction": [MockFunction],
                "history": Object {
                  "push": [MockFunction],
                },
                "match": Object {
                  "params": Object {
                    "token": "ghjkbvfghj",
                  },
                },
                "resetPasswordAction": [MockFunction],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Connect {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "indirectRenderWrappedComponent": [Function],
                "props": Object {
                  "changePasswordAction": [MockFunction],
                  "history": Object {
                    "push": [MockFunction],
                  },
                  "match": Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  },
                  "resetPasswordAction": [MockFunction],
                },
                "refs": Object {},
                "selectChildElement": [Function],
                "selectDerivedProps": [Function],
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 0,
            "elementType": Object {
              "$$typeof": Symbol(react.provider),
              "_context": Object {
                "$$typeof": Symbol(react.context),
                "Consumer": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": [Circular],
                },
                "Provider": [Circular],
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              },
            },
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": <Connect(ResetPasswordView)
                changePasswordAction={[MockFunction]}
                history={
                  Object {
                    "push": [MockFunction],
                  }
                }
                match={
                  Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  }
                }
                resetPasswordAction={[MockFunction]}
              />,
              "value": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeState": Object {
                  "resetPasswordReducer": Object {
                    "message": "hello",
                  },
                },
              },
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": <Connect(ResetPasswordView)
                changePasswordAction={[MockFunction]}
                history={
                  Object {
                    "push": [MockFunction],
                  }
                }
                match={
                  Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  }
                }
                resetPasswordAction={[MockFunction]}
              />,
              "value": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeState": Object {
                  "resetPasswordReducer": Object {
                    "message": "hello",
                  },
                },
              },
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": null,
            "tag": 10,
            "treeBaseDuration": 0,
            "type": Object {
              "$$typeof": Symbol(react.provider),
              "_context": Object {
                "$$typeof": Symbol(react.context),
                "Consumer": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": [Circular],
                },
                "Provider": [Circular],
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              },
            },
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": <Connect(ResetPasswordView)
              changePasswordAction={[MockFunction]}
              history={
                Object {
                  "push": [MockFunction],
                }
              }
              match={
                Object {
                  "params": Object {
                    "token": "ghjkbvfghj",
                  },
                }
              }
              resetPasswordAction={[MockFunction]}
            />,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
          },
          "memoizedState": Object {
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeState": Object {
              "resetPasswordReducer": Object {
                "message": "hello",
              },
            },
          },
          "mode": 0,
          "nextEffect": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 62,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "mode": 0,
            "nextEffect": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 60,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 60,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div>
                      <div>
                        <img
                          alt="text"
                          class="login background-image"
                          src="background-image-3.jpg"
                        />
                        <div
                          class="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <label
                                for="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="confirmPassword"
                                placeholder="Re-enter password"
                                required=""
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                class="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 15,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                  wrappingComponentProps={null}
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                    <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 15,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      }
                    }
                    wrappingComponentProps={null}
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "ref": null,
            "return": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 60,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 60,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div>
                      <div>
                        <img
                          alt="text"
                          class="login background-image"
                          src="background-image-3.jpg"
                        />
                        <div
                          class="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <label
                                for="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="confirmPassword"
                                placeholder="Re-enter password"
                                required=""
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                class="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 15,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                  wrappingComponentProps={null}
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                    <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 15,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      }
                    }
                    wrappingComponentProps={null}
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <Connect(ResetPasswordView)
                    changePasswordAction={[MockFunction]}
                    history={
                      Object {
                        "push": [MockFunction],
                      }
                    }
                    match={
                      Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      }
                    }
                    resetPasswordAction={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "wrappingComponentProps": null,
              },
              "refs": Object {},
              "rootFinderInstance": null,
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <Connect(ResetPasswordView)
                    changePasswordAction={[MockFunction]}
                    history={
                      Object {
                        "push": [MockFunction],
                      }
                    }
                    match={
                      Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      }
                    }
                    resetPasswordAction={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "wrappingComponentProps": null,
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "pendingProps": Object {
            "children": <Connect(ResetPasswordView)
              changePasswordAction={[MockFunction]}
              history={
                Object {
                  "push": [MockFunction],
                }
              }
              match={
                Object {
                  "params": Object {
                    "token": "ghjkbvfghj",
                  },
                }
              }
              resetPasswordAction={[MockFunction]}
            />,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 62,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "mode": 0,
            "nextEffect": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 60,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 60,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div>
                      <div>
                        <img
                          alt="text"
                          class="login background-image"
                          src="background-image-3.jpg"
                        />
                        <div
                          class="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <label
                                for="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="confirmPassword"
                                placeholder="Re-enter password"
                                required=""
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                class="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 15,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                  wrappingComponentProps={null}
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                    <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 15,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      }
                    }
                    wrappingComponentProps={null}
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "wrappingComponentProps": null,
            },
            "ref": null,
            "return": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 60,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 60,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div>
                      <div>
                        <img
                          alt="text"
                          class="login background-image"
                          src="background-image-3.jpg"
                        />
                        <div
                          class="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <label
                                for="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="confirmPassword"
                                placeholder="Re-enter password"
                                required=""
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                class="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 15,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                  wrappingComponentProps={null}
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                    <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 15,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      }
                    }
                    wrappingComponentProps={null}
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <Connect(ResetPasswordView)
                    changePasswordAction={[MockFunction]}
                    history={
                      Object {
                        "push": [MockFunction],
                      }
                    }
                    match={
                      Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      }
                    }
                    resetPasswordAction={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "wrappingComponentProps": null,
              },
              "refs": Object {},
              "rootFinderInstance": null,
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <Connect(ResetPasswordView)
                    changePasswordAction={[MockFunction]}
                    history={
                      Object {
                        "push": [MockFunction],
                      }
                    }
                    match={
                      Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      }
                    }
                    resetPasswordAction={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "wrappingComponentProps": null,
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "props": Object {
          "children": <Connect(ResetPasswordView)
            changePasswordAction={[MockFunction]}
            history={
              Object {
                "push": [MockFunction],
              }
            }
            match={
              Object {
                "params": Object {
                  "token": "ghjkbvfghj",
                },
              }
            }
            resetPasswordAction={[MockFunction]}
          />,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        },
        "refs": Object {},
        "state": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "storeState": Object {
            "resetPasswordReducer": Object {
              "message": "hello",
            },
          },
        },
        "unsubscribe": [Function],
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Connect(ResetPasswordView)
          changePasswordAction={[MockFunction]}
          history={
            Object {
              "push": [MockFunction],
            }
          }
          match={
            Object {
              "params": Object {
                "token": "ghjkbvfghj",
              },
            }
          }
          resetPasswordAction={[MockFunction]}
        />,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": Connect {
          "_reactInternalFiber": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 65,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": Object {
              "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/__tests__/views/resetView/__test__/resetPasswordView.test.js",
              "lineNumber": 48,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 66,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 67,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 68,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/views/resetView/resetPasswordView.js",
                    "lineNumber": 102,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 69,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/views/resetView/resetPasswordView.js",
                      "lineNumber": 103,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 70,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                        "lineNumber": 6,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 71,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                          "lineNumber": 7,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "img",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "alt": "text",
                          "className": "login background-image",
                          "src": "background-image-3.jpg",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "alt": "text",
                          "className": "login background-image",
                          "src": "background-image-3.jpg",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 72,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                            "lineNumber": 8,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 73,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                              "lineNumber": 9,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "h3",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Authors Haven",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Authors Haven",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugHookTypes": null,
                              "_debugID": 74,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                "lineNumber": 11,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugHookTypes": null,
                                "_debugID": 75,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                  "lineNumber": 13,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugHookTypes": null,
                                  "_debugID": 78,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                    "lineNumber": 14,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "label",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": "New Password",
                                    "htmlFor": "newpassword",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": "New Password",
                                    "htmlFor": "newpassword",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugHookTypes": null,
                                    "_debugID": 79,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                      "lineNumber": 15,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "input",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 1,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "className": "form-control",
                                      "minLength": 8,
                                      "name": "password",
                                      "onChange": [Function],
                                      "placeholder": "Enter new password",
                                      "required": true,
                                      "type": "password",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "className": "form-control",
                                      "minLength": 8,
                                      "name": "password",
                                      "onChange": [Function],
                                      "placeholder": "Enter new password",
                                      "required": true,
                                      "type": "password",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": FiberNode {
                                      "_debugHookTypes": null,
                                      "_debugID": 80,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": Object {
                                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                        "lineNumber": 16,
                                      },
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "contextDependencies": null,
                                      "effectTag": 0,
                                      "elementType": "span",
                                      "expirationTime": 0,
                                      "firstEffect": null,
                                      "index": 2,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "children": undefined,
                                        "className": "text-danger",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "children": undefined,
                                        "className": "text-danger",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": null,
                                      "stateNode": <span
                                        class="text-danger"
                                      />,
                                      "tag": 5,
                                      "treeBaseDuration": 0,
                                      "type": "span",
                                      "updateQueue": null,
                                    },
                                    "stateNode": <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "input",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "label",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "div",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": Array [
                                    <label
                                      htmlFor="newpassword"
                                    >
                                      New Password
                                    </label>,
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="password"
                                      onChange={[Function]}
                                      placeholder="Enter new password"
                                      required={true}
                                      type="password"
                                    />,
                                    <span
                                      className="text-danger"
                                    />,
                                  ],
                                  "className": "form-group",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": Array [
                                    <label
                                      htmlFor="newpassword"
                                    >
                                      New Password
                                    </label>,
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="password"
                                      onChange={[Function]}
                                      placeholder="Enter new password"
                                      required={true}
                                      type="password"
                                    />,
                                    <span
                                      className="text-danger"
                                    />,
                                  ],
                                  "className": "form-group",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugHookTypes": null,
                                  "_debugID": 76,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                    "lineNumber": 19,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": FiberNode {
                                    "_debugHookTypes": null,
                                    "_debugID": 81,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                      "lineNumber": 20,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "label",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 0,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": "Confirm Password",
                                      "htmlFor": "confirmpassword",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": "Confirm Password",
                                      "htmlFor": "confirmpassword",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": FiberNode {
                                      "_debugHookTypes": null,
                                      "_debugID": 82,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": Object {
                                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                        "lineNumber": 21,
                                      },
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "contextDependencies": null,
                                      "effectTag": 0,
                                      "elementType": "input",
                                      "expirationTime": 0,
                                      "firstEffect": null,
                                      "index": 1,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "className": "form-control",
                                        "minLength": 8,
                                        "name": "confirmPassword",
                                        "onChange": [Function],
                                        "placeholder": "Re-enter password",
                                        "required": true,
                                        "type": "password",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "className": "form-control",
                                        "minLength": 8,
                                        "name": "confirmPassword",
                                        "onChange": [Function],
                                        "placeholder": "Re-enter password",
                                        "required": true,
                                        "type": "password",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": null,
                                      "stateNode": <input
                                        class="form-control"
                                        minlength="8"
                                        name="confirmPassword"
                                        placeholder="Re-enter password"
                                        required=""
                                        type="password"
                                      />,
                                      "tag": 5,
                                      "treeBaseDuration": 0,
                                      "type": "input",
                                      "updateQueue": null,
                                    },
                                    "stateNode": <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "label",
                                    "updateQueue": null,
                                  },
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "div",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 1,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": Array [
                                      <label
                                        htmlFor="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>,
                                      <input
                                        className="form-control"
                                        minLength={8}
                                        name="confirmPassword"
                                        onChange={[Function]}
                                        placeholder="Re-enter password"
                                        required={true}
                                        type="password"
                                      />,
                                    ],
                                    "className": "form-group",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": Array [
                                      <label
                                        htmlFor="confirmpassword"
                                      >
                                        Confirm Password
                                      </label>,
                                      <input
                                        className="form-control"
                                        minLength={8}
                                        name="confirmPassword"
                                        onChange={[Function]}
                                        placeholder="Re-enter password"
                                        required={true}
                                        type="password"
                                      />,
                                    ],
                                    "className": "form-group",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugHookTypes": null,
                                    "_debugID": 77,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                      "lineNumber": 24,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": FiberNode {
                                      "_debugHookTypes": null,
                                      "_debugID": 83,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": Object {
                                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                        "lineNumber": 24,
                                      },
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "contextDependencies": null,
                                      "effectTag": 0,
                                      "elementType": "button",
                                      "expirationTime": 0,
                                      "firstEffect": null,
                                      "index": 0,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "children": "Change Password",
                                        "className": "btn btn-primary",
                                        "id": "login-button",
                                        "onChange": undefined,
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "children": "Change Password",
                                        "className": "btn btn-primary",
                                        "id": "login-button",
                                        "onChange": undefined,
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": null,
                                      "stateNode": <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>,
                                      "tag": 5,
                                      "treeBaseDuration": 0,
                                      "type": "button",
                                      "updateQueue": null,
                                    },
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "p",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 2,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": <button
                                        className="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>,
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": <button
                                        className="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>,
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <p>
                                      <button
                                        class="btn btn-primary"
                                        id="login-button"
                                      >
                                        Change Password
                                      </button>
                                    </p>,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "p",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "div",
                                  "updateQueue": null,
                                },
                                "stateNode": <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "div",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "form",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": Array [
                                  <div
                                    className="form-group"
                                  >
                                    <label
                                      htmlFor="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="password"
                                      onChange={[Function]}
                                      placeholder="Enter new password"
                                      required={true}
                                      type="password"
                                    />
                                    <span
                                      className="text-danger"
                                    />
                                  </div>,
                                  <div
                                    className="form-group"
                                  >
                                    <label
                                      htmlFor="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="confirmPassword"
                                      onChange={[Function]}
                                      placeholder="Re-enter password"
                                      required={true}
                                      type="password"
                                    />
                                  </div>,
                                  <p>
                                    <button
                                      className="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>,
                                ],
                                "onSubmit": [Function],
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": Array [
                                  <div
                                    className="form-group"
                                  >
                                    <label
                                      htmlFor="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="password"
                                      onChange={[Function]}
                                      placeholder="Enter new password"
                                      required={true}
                                      type="password"
                                    />
                                    <span
                                      className="text-danger"
                                    />
                                  </div>,
                                  <div
                                    className="form-group"
                                  >
                                    <label
                                      htmlFor="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="confirmPassword"
                                      onChange={[Function]}
                                      placeholder="Re-enter password"
                                      required={true}
                                      type="password"
                                    />
                                  </div>,
                                  <p>
                                    <button
                                      className="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>,
                                ],
                                "onSubmit": [Function],
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "form",
                              "updateQueue": null,
                            },
                            "stateNode": <h3>
                              Authors Haven
                            </h3>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "h3",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "div",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <h3>
                                Authors Haven
                              </h3>,
                              <form
                                onSubmit={[Function]}
                              >
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />
                                  <span
                                    className="text-danger"
                                  />
                                </div>
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="confirmPassword"
                                    onChange={[Function]}
                                    placeholder="Re-enter password"
                                    required={true}
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    className="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>,
                            ],
                            "className": "login-wrapper",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <h3>
                                Authors Haven
                              </h3>,
                              <form
                                onSubmit={[Function]}
                              >
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />
                                  <span
                                    className="text-danger"
                                  />
                                </div>
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="confirmPassword"
                                    onChange={[Function]}
                                    placeholder="Re-enter password"
                                    required={true}
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    className="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>,
                            ],
                            "className": "login-wrapper",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <div
                            class="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "stateNode": <img
                          alt="text"
                          class="login background-image"
                          src="background-image-3.jpg"
                        />,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "img",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <img
                            alt="text"
                            className="login background-image"
                            src="background-image-3.jpg"
                          />,
                          <div
                            className="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form
                              onSubmit={[Function]}
                            >
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Enter new password"
                                  required={true}
                                  type="password"
                                />
                                <span
                                  className="text-danger"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="confirmPassword"
                                  onChange={[Function]}
                                  placeholder="Re-enter password"
                                  required={true}
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  className="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>,
                        ],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <img
                            alt="text"
                            className="login background-image"
                            src="background-image-3.jpg"
                          />,
                          <div
                            className="login-wrapper"
                          >
                            <h3>
                              Authors Haven
                            </h3>
                            <form
                              onSubmit={[Function]}
                            >
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Enter new password"
                                  required={true}
                                  type="password"
                                />
                                <span
                                  className="text-danger"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="confirmPassword"
                                  onChange={[Function]}
                                  placeholder="Re-enter password"
                                  required={true}
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  className="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>
                          </div>,
                        ],
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div>
                        <img
                          alt="text"
                          class="login background-image"
                          src="background-image-3.jpg"
                        />
                        <div
                          class="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <label
                                for="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="confirmPassword"
                                placeholder="Re-enter password"
                                required=""
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                class="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 1,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "onChange": [Function],
                      "onSubmit": [Function],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "onChange": [Function],
                      "onSubmit": [Function],
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 0,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <ChangeForm
                      onChange={[Function]}
                      onSubmit={[Function]}
                    />,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <ChangeForm
                      onChange={[Function]}
                      onSubmit={[Function]}
                    />,
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div>
                    <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "changePasswordAction": [Function],
                  "detail": undefined,
                  "history": Object {
                    "push": [MockFunction],
                  },
                  "match": Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  },
                  "message": "hello",
                  "resetPasswordAction": [Function],
                },
                "memoizedState": Object {
                  "confirmPassword": "",
                  "disabled": true,
                  "email": "",
                  "errors": Object {
                    "email": "",
                  },
                  "loader": Object {
                    "loading": false,
                  },
                  "password": "",
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "changePasswordAction": [Function],
                  "detail": undefined,
                  "history": Object {
                    "push": [MockFunction],
                  },
                  "match": Object {
                    "params": Object {
                      "token": "ghjkbvfghj",
                    },
                  },
                  "message": "hello",
                  "resetPasswordAction": [Function],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": ResetPasswordView {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "handlePasswordSubmit": [Function],
                  "handleSubmit": [Function],
                  "onChange": [Function],
                  "props": Object {
                    "changePasswordAction": [Function],
                    "detail": undefined,
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "message": "hello",
                    "resetPasswordAction": [Function],
                  },
                  "refs": Object {},
                  "state": Object {
                    "confirmPassword": "",
                    "disabled": true,
                    "email": "",
                    "errors": Object {
                      "email": "",
                    },
                    "loader": Object {
                      "loading": false,
                    },
                    "password": "",
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                  "validateEmail": [Function],
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "contextDependencies": Object {
                "expirationTime": 0,
                "first": Object {
                  "context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": Object {
                      "$$typeof": Symbol(react.context),
                      "_calculateChangedBits": null,
                      "_context": [Circular],
                    },
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                  "next": null,
                  "observedBits": 1073741823,
                },
              },
              "effectTag": 1,
              "elementType": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": [Function],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": null,
              "tag": 9,
              "treeBaseDuration": 0,
              "type": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "changePasswordAction": [MockFunction],
              "history": Object {
                "push": [MockFunction],
              },
              "match": Object {
                "params": Object {
                  "token": "ghjkbvfghj",
                },
              },
              "resetPasswordAction": [MockFunction],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "changePasswordAction": [MockFunction],
              "history": Object {
                "push": [MockFunction],
              },
              "match": Object {
                "params": Object {
                  "token": "ghjkbvfghj",
                },
              },
              "resetPasswordAction": [MockFunction],
            },
            "ref": null,
            "return": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 64,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 63,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 62,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "mode": 0,
                  "nextEffect": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 60,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div>
                            <div>
                              <img
                                alt="text"
                                class="login background-image"
                                src="background-image-3.jpg"
                              />
                              <div
                                class="login-wrapper"
                              >
                                <h3>
                                  Authors Haven
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />
                                    <span
                                      class="text-danger"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 15,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                          wrappingComponentProps={null}
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 60,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div>
                            <div>
                              <img
                                alt="text"
                                class="login background-image"
                                src="background-image-3.jpg"
                              />
                              <div
                                class="login-wrapper"
                              >
                                <h3>
                                  Authors Haven
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />
                                    <span
                                      class="text-danger"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 15,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                          wrappingComponentProps={null}
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "wrappingComponentProps": null,
                    },
                    "refs": Object {},
                    "rootFinderInstance": null,
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "wrappingComponentProps": null,
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 5,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <Connect(ResetPasswordView)
                    changePasswordAction={[MockFunction]}
                    history={
                      Object {
                        "push": [MockFunction],
                      }
                    }
                    match={
                      Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      }
                    }
                    resetPasswordAction={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "memoizedState": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeState": Object {
                    "resetPasswordReducer": Object {
                      "message": "hello",
                    },
                  },
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 62,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "mode": 0,
                  "nextEffect": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 60,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div>
                            <div>
                              <img
                                alt="text"
                                class="login background-image"
                                src="background-image-3.jpg"
                              />
                              <div
                                class="login-wrapper"
                              >
                                <h3>
                                  Authors Haven
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />
                                    <span
                                      class="text-danger"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 15,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                          wrappingComponentProps={null}
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 60,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div>
                            <div>
                              <img
                                alt="text"
                                class="login background-image"
                                src="background-image-3.jpg"
                              />
                              <div
                                class="login-wrapper"
                              >
                                <h3>
                                  Authors Haven
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />
                                    <span
                                      class="text-danger"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 15,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                          wrappingComponentProps={null}
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "wrappingComponentProps": null,
                    },
                    "refs": Object {},
                    "rootFinderInstance": null,
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "wrappingComponentProps": null,
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "pendingProps": Object {
                  "children": <Connect(ResetPasswordView)
                    changePasswordAction={[MockFunction]}
                    history={
                      Object {
                        "push": [MockFunction],
                      }
                    }
                    match={
                      Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      }
                    }
                    resetPasswordAction={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 62,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "mode": 0,
                  "nextEffect": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 60,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div>
                            <div>
                              <img
                                alt="text"
                                class="login background-image"
                                src="background-image-3.jpg"
                              />
                              <div
                                class="login-wrapper"
                              >
                                <h3>
                                  Authors Haven
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />
                                    <span
                                      class="text-danger"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 15,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                          wrappingComponentProps={null}
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 60,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div>
                            <div>
                              <img
                                alt="text"
                                class="login background-image"
                                src="background-image-3.jpg"
                              />
                              <div
                                class="login-wrapper"
                              >
                                <h3>
                                  Authors Haven
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />
                                    <span
                                      class="text-danger"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 15,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                          wrappingComponentProps={null}
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "wrappingComponentProps": null,
                    },
                    "refs": Object {},
                    "rootFinderInstance": null,
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "wrappingComponentProps": null,
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Provider {
                  "_isMounted": true,
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                    "storeState": Object {
                      "resetPasswordReducer": Object {
                        "message": "hello",
                      },
                    },
                  },
                  "unsubscribe": [Function],
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": Object {
                "$$typeof": Symbol(react.provider),
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": Object {
                    "$$typeof": Symbol(react.context),
                    "_calculateChangedBits": null,
                    "_context": [Circular],
                  },
                  "Provider": [Circular],
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "value": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeState": Object {
                    "resetPasswordReducer": Object {
                      "message": "hello",
                    },
                  },
                },
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <Connect(ResetPasswordView)
                  changePasswordAction={[MockFunction]}
                  history={
                    Object {
                      "push": [MockFunction],
                    }
                  }
                  match={
                    Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    }
                  }
                  resetPasswordAction={[MockFunction]}
                />,
                "value": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeState": Object {
                    "resetPasswordReducer": Object {
                      "message": "hello",
                    },
                  },
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 63,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 62,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "mode": 0,
                  "nextEffect": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 60,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div>
                            <div>
                              <img
                                alt="text"
                                class="login background-image"
                                src="background-image-3.jpg"
                              />
                              <div
                                class="login-wrapper"
                              >
                                <h3>
                                  Authors Haven
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />
                                    <span
                                      class="text-danger"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 15,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                          wrappingComponentProps={null}
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 60,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div>
                            <div>
                              <img
                                alt="text"
                                class="login background-image"
                                src="background-image-3.jpg"
                              />
                              <div
                                class="login-wrapper"
                              >
                                <h3>
                                  Authors Haven
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />
                                    <span
                                      class="text-danger"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 15,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                          wrappingComponentProps={null}
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "wrappingComponentProps": null,
                    },
                    "refs": Object {},
                    "rootFinderInstance": null,
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "wrappingComponentProps": null,
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 5,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <Connect(ResetPasswordView)
                    changePasswordAction={[MockFunction]}
                    history={
                      Object {
                        "push": [MockFunction],
                      }
                    }
                    match={
                      Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      }
                    }
                    resetPasswordAction={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "memoizedState": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeState": Object {
                    "resetPasswordReducer": Object {
                      "message": "hello",
                    },
                  },
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 62,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "mode": 0,
                  "nextEffect": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 60,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div>
                            <div>
                              <img
                                alt="text"
                                class="login background-image"
                                src="background-image-3.jpg"
                              />
                              <div
                                class="login-wrapper"
                              >
                                <h3>
                                  Authors Haven
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />
                                    <span
                                      class="text-danger"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 15,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                          wrappingComponentProps={null}
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 60,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div>
                            <div>
                              <img
                                alt="text"
                                class="login background-image"
                                src="background-image-3.jpg"
                              />
                              <div
                                class="login-wrapper"
                              >
                                <h3>
                                  Authors Haven
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />
                                    <span
                                      class="text-danger"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 15,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                          wrappingComponentProps={null}
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "wrappingComponentProps": null,
                    },
                    "refs": Object {},
                    "rootFinderInstance": null,
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "wrappingComponentProps": null,
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "pendingProps": Object {
                  "children": <Connect(ResetPasswordView)
                    changePasswordAction={[MockFunction]}
                    history={
                      Object {
                        "push": [MockFunction],
                      }
                    }
                    match={
                      Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      }
                    }
                    resetPasswordAction={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 62,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "mode": 0,
                  "nextEffect": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 60,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div>
                            <div>
                              <img
                                alt="text"
                                class="login background-image"
                                src="background-image-3.jpg"
                              />
                              <div
                                class="login-wrapper"
                              >
                                <h3>
                                  Authors Haven
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />
                                    <span
                                      class="text-danger"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 15,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                          wrappingComponentProps={null}
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "wrappingComponentProps": null,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 60,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div>
                            <div>
                              <img
                                alt="text"
                                class="login background-image"
                                src="background-image-3.jpg"
                              />
                              <div
                                class="login-wrapper"
                              >
                                <h3>
                                  Authors Haven
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="newpassword"
                                    >
                                      New Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="password"
                                      placeholder="Enter new password"
                                      required=""
                                      type="password"
                                    />
                                    <span
                                      class="text-danger"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <label
                                      for="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />
                                  </div>
                                  <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 15,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div>
                          <div>
                            <img
                              alt="text"
                              class="login background-image"
                              src="background-image-3.jpg"
                            />
                            <div
                              class="login-wrapper"
                            >
                              <h3>
                                Authors Haven
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />
                                  <span
                                    class="text-danger"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>
                                <p>
                                  <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 15,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                          wrappingComponentProps={null}
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "wrappingComponentProps": null,
                    },
                    "refs": Object {},
                    "rootFinderInstance": null,
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "wrappingComponentProps": null,
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Provider {
                  "_isMounted": true,
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "children": <Connect(ResetPasswordView)
                      changePasswordAction={[MockFunction]}
                      history={
                        Object {
                          "push": [MockFunction],
                        }
                      }
                      match={
                        Object {
                          "params": Object {
                            "token": "ghjkbvfghj",
                          },
                        }
                      }
                      resetPasswordAction={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                    "storeState": Object {
                      "resetPasswordReducer": Object {
                        "message": "hello",
                      },
                    },
                  },
                  "unsubscribe": [Function],
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": null,
              "tag": 10,
              "treeBaseDuration": 0,
              "type": Object {
                "$$typeof": Symbol(react.provider),
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": Object {
                    "$$typeof": Symbol(react.context),
                    "_calculateChangedBits": null,
                    "_context": [Circular],
                  },
                  "Provider": [Circular],
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": [Circular],
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_reactInternalInstance": Object {},
          "context": Object {},
          "indirectRenderWrappedComponent": [Function],
          "props": Object {
            "changePasswordAction": [MockFunction],
            "history": Object {
              "push": [MockFunction],
            },
            "match": Object {
              "params": Object {
                "token": "ghjkbvfghj",
              },
            },
            "resetPasswordAction": [MockFunction],
          },
          "refs": Object {},
          "selectChildElement": [Function],
          "selectDerivedProps": [Function],
          "state": null,
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
        },
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "changePasswordAction": [MockFunction],
          "history": Object {
            "push": [MockFunction],
          },
          "match": Object {
            "params": Object {
              "token": "ghjkbvfghj",
            },
          },
          "resetPasswordAction": [MockFunction],
        },
        "ref": null,
        "rendered": Object {
          "instance": ResetPasswordView {
            "_reactInternalFiber": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 67,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 66,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 65,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": Object {
                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/__tests__/views/resetView/__test__/resetPasswordView.test.js",
                    "lineNumber": 48,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "changePasswordAction": [MockFunction],
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "resetPasswordAction": [MockFunction],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "changePasswordAction": [MockFunction],
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "resetPasswordAction": [MockFunction],
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 64,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 63,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "resetPasswordReducer": Object {
                              "message": "hello",
                            },
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 63,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "resetPasswordReducer": Object {
                              "message": "hello",
                            },
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 10,
                    "treeBaseDuration": 0,
                    "type": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Connect {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "indirectRenderWrappedComponent": [Function],
                    "props": Object {
                      "changePasswordAction": [MockFunction],
                      "history": Object {
                        "push": [MockFunction],
                      },
                      "match": Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      },
                      "resetPasswordAction": [MockFunction],
                    },
                    "refs": Object {},
                    "selectChildElement": [Function],
                    "selectDerivedProps": [Function],
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": Object {
                  "expirationTime": 0,
                  "first": Object {
                    "context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": Object {
                        "$$typeof": Symbol(react.provider),
                        "_context": [Circular],
                      },
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                    "next": null,
                    "observedBits": 1073741823,
                  },
                },
                "effectTag": 1,
                "elementType": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": [Circular],
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                },
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": [Function],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 65,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": Object {
                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/__tests__/views/resetView/__test__/resetPasswordView.test.js",
                    "lineNumber": 48,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "changePasswordAction": [MockFunction],
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "resetPasswordAction": [MockFunction],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "changePasswordAction": [MockFunction],
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "resetPasswordAction": [MockFunction],
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 64,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 63,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "resetPasswordReducer": Object {
                              "message": "hello",
                            },
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 63,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "resetPasswordReducer": Object {
                              "message": "hello",
                            },
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 10,
                    "treeBaseDuration": 0,
                    "type": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Connect {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "indirectRenderWrappedComponent": [Function],
                    "props": Object {
                      "changePasswordAction": [MockFunction],
                      "history": Object {
                        "push": [MockFunction],
                      },
                      "match": Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      },
                      "resetPasswordAction": [MockFunction],
                    },
                    "refs": Object {},
                    "selectChildElement": [Function],
                    "selectDerivedProps": [Function],
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": null,
                "tag": 9,
                "treeBaseDuration": 0,
                "type": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": [Circular],
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                },
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 68,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/views/resetView/resetPasswordView.js",
                  "lineNumber": 102,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 69,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/views/resetView/resetPasswordView.js",
                    "lineNumber": 103,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 70,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                      "lineNumber": 6,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 71,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                        "lineNumber": 7,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": "img",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "alt": "text",
                        "className": "login background-image",
                        "src": "background-image-3.jpg",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "alt": "text",
                        "className": "login background-image",
                        "src": "background-image-3.jpg",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 72,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                          "lineNumber": 8,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 73,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                            "lineNumber": 9,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "h3",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Authors Haven",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Authors Haven",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 74,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                              "lineNumber": 11,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugHookTypes": null,
                              "_debugID": 75,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                "lineNumber": 13,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugHookTypes": null,
                                "_debugID": 78,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                  "lineNumber": 14,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "label",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": "New Password",
                                  "htmlFor": "newpassword",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": "New Password",
                                  "htmlFor": "newpassword",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugHookTypes": null,
                                  "_debugID": 79,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                    "lineNumber": 15,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "input",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 1,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "className": "form-control",
                                    "minLength": 8,
                                    "name": "password",
                                    "onChange": [Function],
                                    "placeholder": "Enter new password",
                                    "required": true,
                                    "type": "password",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "className": "form-control",
                                    "minLength": 8,
                                    "name": "password",
                                    "onChange": [Function],
                                    "placeholder": "Enter new password",
                                    "required": true,
                                    "type": "password",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugHookTypes": null,
                                    "_debugID": 80,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                      "lineNumber": 16,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "span",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 2,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": undefined,
                                      "className": "text-danger",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": undefined,
                                      "className": "text-danger",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <span
                                      class="text-danger"
                                    />,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "span",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "input",
                                  "updateQueue": null,
                                },
                                "stateNode": <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "label",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "div",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": Array [
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>,
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />,
                                  <span
                                    className="text-danger"
                                  />,
                                ],
                                "className": "form-group",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": Array [
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>,
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />,
                                  <span
                                    className="text-danger"
                                  />,
                                ],
                                "className": "form-group",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugHookTypes": null,
                                "_debugID": 76,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                  "lineNumber": 19,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugHookTypes": null,
                                  "_debugID": 81,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                    "lineNumber": 20,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "label",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": "Confirm Password",
                                    "htmlFor": "confirmpassword",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": "Confirm Password",
                                    "htmlFor": "confirmpassword",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugHookTypes": null,
                                    "_debugID": 82,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                      "lineNumber": 21,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "input",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 1,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "className": "form-control",
                                      "minLength": 8,
                                      "name": "confirmPassword",
                                      "onChange": [Function],
                                      "placeholder": "Re-enter password",
                                      "required": true,
                                      "type": "password",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "className": "form-control",
                                      "minLength": 8,
                                      "name": "confirmPassword",
                                      "onChange": [Function],
                                      "placeholder": "Re-enter password",
                                      "required": true,
                                      "type": "password",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <input
                                      class="form-control"
                                      minlength="8"
                                      name="confirmPassword"
                                      placeholder="Re-enter password"
                                      required=""
                                      type="password"
                                    />,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "input",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "label",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "div",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": Array [
                                    <label
                                      htmlFor="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>,
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="confirmPassword"
                                      onChange={[Function]}
                                      placeholder="Re-enter password"
                                      required={true}
                                      type="password"
                                    />,
                                  ],
                                  "className": "form-group",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": Array [
                                    <label
                                      htmlFor="confirmpassword"
                                    >
                                      Confirm Password
                                    </label>,
                                    <input
                                      className="form-control"
                                      minLength={8}
                                      name="confirmPassword"
                                      onChange={[Function]}
                                      placeholder="Re-enter password"
                                      required={true}
                                      type="password"
                                    />,
                                  ],
                                  "className": "form-group",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugHookTypes": null,
                                  "_debugID": 77,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                    "lineNumber": 24,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": FiberNode {
                                    "_debugHookTypes": null,
                                    "_debugID": 83,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/components/resetPassword/changePasswordForm.js",
                                      "lineNumber": 24,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "button",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 0,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": "Change Password",
                                      "className": "btn btn-primary",
                                      "id": "login-button",
                                      "onChange": undefined,
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": "Change Password",
                                      "className": "btn btn-primary",
                                      "id": "login-button",
                                      "onChange": undefined,
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "button",
                                    "updateQueue": null,
                                  },
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "p",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 2,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": <button
                                      className="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>,
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": <button
                                      className="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>,
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <p>
                                    <button
                                      class="btn btn-primary"
                                      id="login-button"
                                    >
                                      Change Password
                                    </button>
                                  </p>,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "p",
                                  "updateQueue": null,
                                },
                                "stateNode": <div
                                  class="form-group"
                                >
                                  <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />
                                </div>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "div",
                                "updateQueue": null,
                              },
                              "stateNode": <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "form",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />
                                  <span
                                    className="text-danger"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="confirmPassword"
                                    onChange={[Function]}
                                    placeholder="Re-enter password"
                                    required={true}
                                    type="password"
                                  />
                                </div>,
                                <p>
                                  <button
                                    className="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>,
                              ],
                              "onSubmit": [Function],
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />
                                  <span
                                    className="text-danger"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <label
                                    htmlFor="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="confirmPassword"
                                    onChange={[Function]}
                                    placeholder="Re-enter password"
                                    required={true}
                                    type="password"
                                  />
                                </div>,
                                <p>
                                  <button
                                    className="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>
                                </p>,
                              ],
                              "onSubmit": [Function],
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <form>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "form",
                            "updateQueue": null,
                          },
                          "stateNode": <h3>
                            Authors Haven
                          </h3>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "h3",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "div",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <h3>
                              Authors Haven
                            </h3>,
                            <form
                              onSubmit={[Function]}
                            >
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Enter new password"
                                  required={true}
                                  type="password"
                                />
                                <span
                                  className="text-danger"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="confirmPassword"
                                  onChange={[Function]}
                                  placeholder="Re-enter password"
                                  required={true}
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  className="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>,
                          ],
                          "className": "login-wrapper",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <h3>
                              Authors Haven
                            </h3>,
                            <form
                              onSubmit={[Function]}
                            >
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Enter new password"
                                  required={true}
                                  type="password"
                                />
                                <span
                                  className="text-danger"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="confirmPassword"
                                  onChange={[Function]}
                                  placeholder="Re-enter password"
                                  required={true}
                                  type="password"
                                />
                              </div>
                              <p>
                                <button
                                  className="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>
                            </form>,
                          ],
                          "className": "login-wrapper",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <div
                          class="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <label
                                for="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="confirmPassword"
                                placeholder="Re-enter password"
                                required=""
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                class="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "stateNode": <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "img",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <img
                          alt="text"
                          className="login background-image"
                          src="background-image-3.jpg"
                        />,
                        <div
                          className="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form
                            onSubmit={[Function]}
                          >
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="password"
                                onChange={[Function]}
                                placeholder="Enter new password"
                                required={true}
                                type="password"
                              />
                              <span
                                className="text-danger"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="confirmPassword"
                                onChange={[Function]}
                                placeholder="Re-enter password"
                                required={true}
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                className="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>,
                      ],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <img
                          alt="text"
                          className="login background-image"
                          src="background-image-3.jpg"
                        />,
                        <div
                          className="login-wrapper"
                        >
                          <h3>
                            Authors Haven
                          </h3>
                          <form
                            onSubmit={[Function]}
                          >
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="password"
                                onChange={[Function]}
                                placeholder="Enter new password"
                                required={true}
                                type="password"
                              />
                              <span
                                className="text-danger"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="confirmPassword"
                                onChange={[Function]}
                                placeholder="Re-enter password"
                                required={true}
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                className="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>
                        </div>,
                      ],
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div>
                      <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />
                      <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "onChange": [Function],
                    "onSubmit": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "onChange": [Function],
                    "onSubmit": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": null,
                  "tag": 0,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": "div",
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <ChangeForm
                    onChange={[Function]}
                    onSubmit={[Function]}
                  />,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <ChangeForm
                    onChange={[Function]}
                    onSubmit={[Function]}
                  />,
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <div>
                  <div>
                    <img
                      alt="text"
                      class="login background-image"
                      src="background-image-3.jpg"
                    />
                    <div
                      class="login-wrapper"
                    >
                      <h3>
                        Authors Haven
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <label
                            for="newpassword"
                          >
                            New Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="password"
                            placeholder="Enter new password"
                            required=""
                            type="password"
                          />
                          <span
                            class="text-danger"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <label
                            for="confirmpassword"
                          >
                            Confirm Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="confirmPassword"
                            placeholder="Re-enter password"
                            required=""
                            type="password"
                          />
                        </div>
                        <p>
                          <button
                            class="btn btn-primary"
                            id="login-button"
                          >
                            Change Password
                          </button>
                        </p>
                      </form>
                    </div>
                  </div>
                </div>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "changePasswordAction": [Function],
                "detail": undefined,
                "history": Object {
                  "push": [MockFunction],
                },
                "match": Object {
                  "params": Object {
                    "token": "ghjkbvfghj",
                  },
                },
                "message": "hello",
                "resetPasswordAction": [Function],
              },
              "memoizedState": Object {
                "confirmPassword": "",
                "disabled": true,
                "email": "",
                "errors": Object {
                  "email": "",
                },
                "loader": Object {
                  "loading": false,
                },
                "password": "",
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "changePasswordAction": [Function],
                "detail": undefined,
                "history": Object {
                  "push": [MockFunction],
                },
                "match": Object {
                  "params": Object {
                    "token": "ghjkbvfghj",
                  },
                },
                "message": "hello",
                "resetPasswordAction": [Function],
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 66,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 65,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": Object {
                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/__tests__/views/resetView/__test__/resetPasswordView.test.js",
                    "lineNumber": 48,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "changePasswordAction": [MockFunction],
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "resetPasswordAction": [MockFunction],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "changePasswordAction": [MockFunction],
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "resetPasswordAction": [MockFunction],
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 64,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 63,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "resetPasswordReducer": Object {
                              "message": "hello",
                            },
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 63,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "resetPasswordReducer": Object {
                              "message": "hello",
                            },
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 10,
                    "treeBaseDuration": 0,
                    "type": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Connect {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "indirectRenderWrappedComponent": [Function],
                    "props": Object {
                      "changePasswordAction": [MockFunction],
                      "history": Object {
                        "push": [MockFunction],
                      },
                      "match": Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      },
                      "resetPasswordAction": [MockFunction],
                    },
                    "refs": Object {},
                    "selectChildElement": [Function],
                    "selectDerivedProps": [Function],
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": Object {
                  "expirationTime": 0,
                  "first": Object {
                    "context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": Object {
                        "$$typeof": Symbol(react.provider),
                        "_context": [Circular],
                      },
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                    "next": null,
                    "observedBits": 1073741823,
                  },
                },
                "effectTag": 1,
                "elementType": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": [Circular],
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                },
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": [Function],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 65,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": Object {
                    "fileName": "/Users/wasibani/Desktop/authors-haven-frontend2/ah-aquaman-frontend/src/__tests__/views/resetView/__test__/resetPasswordView.test.js",
                    "lineNumber": 48,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "changePasswordAction": [MockFunction],
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "resetPasswordAction": [MockFunction],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "changePasswordAction": [MockFunction],
                    "history": Object {
                      "push": [MockFunction],
                    },
                    "match": Object {
                      "params": Object {
                        "token": "ghjkbvfghj",
                      },
                    },
                    "resetPasswordAction": [MockFunction],
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 64,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 63,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "resetPasswordReducer": Object {
                              "message": "hello",
                            },
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <Connect(ResetPasswordView)
                        changePasswordAction={[MockFunction]}
                        history={
                          Object {
                            "push": [MockFunction],
                          }
                        }
                        match={
                          Object {
                            "params": Object {
                              "token": "ghjkbvfghj",
                            },
                          }
                        }
                        resetPasswordAction={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 63,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "resetPasswordReducer": Object {
                            "message": "hello",
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(ResetPasswordView)
                          changePasswordAction={[MockFunction]}
                          history={
                            Object {
                              "push": [MockFunction],
                            }
                          }
                          match={
                            Object {
                              "params": Object {
                                "token": "ghjkbvfghj",
                              },
                            }
                          }
                          resetPasswordAction={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(ResetPasswordView)
                              changePasswordAction={[MockFunction]}
                              history={
                                Object {
                                  "push": [MockFunction],
                                }
                              }
                              match={
                                Object {
                                  "params": Object {
                                    "token": "ghjkbvfghj",
                                  },
                                }
                              }
                              resetPasswordAction={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div>
                                  <div>
                                    <img
                                      alt="text"
                                      class="login background-image"
                                      src="background-image-3.jpg"
                                    />
                                    <div
                                      class="login-wrapper"
                                    >
                                      <h3>
                                        Authors Haven
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="newpassword"
                                          >
                                            New Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="password"
                                            placeholder="Enter new password"
                                            required=""
                                            type="password"
                                          />
                                          <span
                                            class="text-danger"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <label
                                            for="confirmpassword"
                                          >
                                            Confirm Password
                                          </label>
                                          <input
                                            class="form-control"
                                            minlength="8"
                                            name="confirmPassword"
                                            placeholder="Re-enter password"
                                            required=""
                                            type="password"
                                          />
                                        </div>
                                        <p>
                                          <button
                                            class="btn btn-primary"
                                            id="login-button"
                                          >
                                            Change Password
                                          </button>
                                        </p>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 15,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(ResetPasswordView)
                                          changePasswordAction={[MockFunction]}
                                          history={
                                            Object {
                                              "push": [MockFunction],
                                            }
                                          }
                                          match={
                                            Object {
                                              "params": Object {
                                                "token": "ghjkbvfghj",
                                              },
                                            }
                                          }
                                          resetPasswordAction={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(ResetPasswordView)
                                    changePasswordAction={[MockFunction]}
                                    history={
                                      Object {
                                        "push": [MockFunction],
                                      }
                                    }
                                    match={
                                      Object {
                                        "params": Object {
                                          "token": "ghjkbvfghj",
                                        },
                                      }
                                    }
                                    resetPasswordAction={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div>
                                <div>
                                  <img
                                    alt="text"
                                    class="login background-image"
                                    src="background-image-3.jpg"
                                  />
                                  <div
                                    class="login-wrapper"
                                  >
                                    <h3>
                                      Authors Haven
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="newpassword"
                                        >
                                          New Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="password"
                                          placeholder="Enter new password"
                                          required=""
                                          type="password"
                                        />
                                        <span
                                          class="text-danger"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <label
                                          for="confirmpassword"
                                        >
                                          Confirm Password
                                        </label>
                                        <input
                                          class="form-control"
                                          minlength="8"
                                          name="confirmPassword"
                                          placeholder="Re-enter password"
                                          required=""
                                          type="password"
                                        />
                                      </div>
                                      <p>
                                        <button
                                          class="btn btn-primary"
                                          id="login-button"
                                        >
                                          Change Password
                                        </button>
                                      </p>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 15,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(ResetPasswordView)
                                      changePasswordAction={[MockFunction]}
                                      history={
                                        Object {
                                          "push": [MockFunction],
                                        }
                                      }
                                      match={
                                        Object {
                                          "params": Object {
                                            "token": "ghjkbvfghj",
                                          },
                                        }
                                      }
                                      resetPasswordAction={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                                wrappingComponentProps={null}
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "rootFinderInstance": null,
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(ResetPasswordView)
                                changePasswordAction={[MockFunction]}
                                history={
                                  Object {
                                    "push": [MockFunction],
                                  }
                                }
                                match={
                                  Object {
                                    "params": Object {
                                      "token": "ghjkbvfghj",
                                    },
                                  }
                                }
                                resetPasswordAction={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(ResetPasswordView)
                            changePasswordAction={[MockFunction]}
                            history={
                              Object {
                                "push": [MockFunction],
                              }
                            }
                            match={
                              Object {
                                "params": Object {
                                  "token": "ghjkbvfghj",
                                },
                              }
                            }
                            resetPasswordAction={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "resetPasswordReducer": Object {
                              "message": "hello",
                            },
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 10,
                    "treeBaseDuration": 0,
                    "type": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Connect {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "indirectRenderWrappedComponent": [Function],
                    "props": Object {
                      "changePasswordAction": [MockFunction],
                      "history": Object {
                        "push": [MockFunction],
                      },
                      "match": Object {
                        "params": Object {
                          "token": "ghjkbvfghj",
                        },
                      },
                      "resetPasswordAction": [MockFunction],
                    },
                    "refs": Object {},
                    "selectChildElement": [Function],
                    "selectDerivedProps": [Function],
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": null,
                "tag": 9,
                "treeBaseDuration": 0,
                "type": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": [Circular],
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                },
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": [Circular],
              "tag": 1,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_reactInternalInstance": Object {},
            "context": Object {},
            "handlePasswordSubmit": [Function],
            "handleSubmit": [Function],
            "onChange": [Function],
            "props": Object {
              "changePasswordAction": [Function],
              "detail": undefined,
              "history": Object {
                "push": [MockFunction],
              },
              "match": Object {
                "params": Object {
                  "token": "ghjkbvfghj",
                },
              },
              "message": "hello",
              "resetPasswordAction": [Function],
            },
            "refs": Object {},
            "state": Object {
              "confirmPassword": "",
              "disabled": true,
              "email": "",
              "errors": Object {
                "email": "",
              },
              "loader": Object {
                "loading": false,
              },
              "password": "",
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
            "validateEmail": [Function],
          },
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "changePasswordAction": [Function],
            "detail": undefined,
            "history": Object {
              "push": [MockFunction],
            },
            "match": Object {
              "params": Object {
                "token": "ghjkbvfghj",
              },
            },
            "message": "hello",
            "resetPasswordAction": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": <div>
              <div>
                <img
                  alt="text"
                  class="login background-image"
                  src="background-image-3.jpg"
                />
                <div
                  class="login-wrapper"
                >
                  <h3>
                    Authors Haven
                  </h3>
                  <form>
                    <div
                      class="form-group"
                    >
                      <label
                        for="newpassword"
                      >
                        New Password
                      </label>
                      <input
                        class="form-control"
                        minlength="8"
                        name="password"
                        placeholder="Enter new password"
                        required=""
                        type="password"
                      />
                      <span
                        class="text-danger"
                      />
                    </div>
                    <div
                      class="form-group"
                    >
                      <label
                        for="confirmpassword"
                      >
                        Confirm Password
                      </label>
                      <input
                        class="form-control"
                        minlength="8"
                        name="confirmPassword"
                        placeholder="Re-enter password"
                        required=""
                        type="password"
                      />
                    </div>
                    <p>
                      <button
                        class="btn btn-primary"
                        id="login-button"
                      >
                        Change Password
                      </button>
                    </p>
                  </form>
                </div>
              </div>
            </div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <ChangeForm
                onChange={[Function]}
                onSubmit={[Function]}
              />,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "onChange": [Function],
                  "onSubmit": [Function],
                },
                "ref": null,
                "rendered": Object {
                  "instance": <div>
                    <img
                      alt="text"
                      class="login background-image"
                      src="background-image-3.jpg"
                    />
                    <div
                      class="login-wrapper"
                    >
                      <h3>
                        Authors Haven
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <label
                            for="newpassword"
                          >
                            New Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="password"
                            placeholder="Enter new password"
                            required=""
                            type="password"
                          />
                          <span
                            class="text-danger"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <label
                            for="confirmpassword"
                          >
                            Confirm Password
                          </label>
                          <input
                            class="form-control"
                            minlength="8"
                            name="confirmPassword"
                            placeholder="Re-enter password"
                            required=""
                            type="password"
                          />
                        </div>
                        <p>
                          <button
                            class="btn btn-primary"
                            id="login-button"
                          >
                            Change Password
                          </button>
                        </p>
                      </form>
                    </div>
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <img
                        alt="text"
                        className="login background-image"
                        src="background-image-3.jpg"
                      />,
                      <div
                        className="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form
                          onSubmit={[Function]}
                        >
                          <div
                            className="form-group"
                          >
                            <label
                              htmlFor="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              className="form-control"
                              minLength={8}
                              name="password"
                              onChange={[Function]}
                              placeholder="Enter new password"
                              required={true}
                              type="password"
                            />
                            <span
                              className="text-danger"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <label
                              htmlFor="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              className="form-control"
                              minLength={8}
                              name="confirmPassword"
                              onChange={[Function]}
                              placeholder="Re-enter password"
                              required={true}
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              className="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <img
                        alt="text"
                        class="login background-image"
                        src="background-image-3.jpg"
                      />,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "alt": "text",
                        "className": "login background-image",
                        "src": "background-image-3.jpg",
                      },
                      "ref": null,
                      "rendered": Array [
                        undefined,
                      ],
                      "type": "img",
                    },
                    Object {
                      "instance": <div
                        class="login-wrapper"
                      >
                        <h3>
                          Authors Haven
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <label
                              for="newpassword"
                            >
                              New Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="password"
                              placeholder="Enter new password"
                              required=""
                              type="password"
                            />
                            <span
                              class="text-danger"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <label
                              for="confirmpassword"
                            >
                              Confirm Password
                            </label>
                            <input
                              class="form-control"
                              minlength="8"
                              name="confirmPassword"
                              placeholder="Re-enter password"
                              required=""
                              type="password"
                            />
                          </div>
                          <p>
                            <button
                              class="btn btn-primary"
                              id="login-button"
                            >
                              Change Password
                            </button>
                          </p>
                        </form>
                      </div>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <h3>
                            Authors Haven
                          </h3>,
                          <form
                            onSubmit={[Function]}
                          >
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="password"
                                onChange={[Function]}
                                placeholder="Enter new password"
                                required={true}
                                type="password"
                              />
                              <span
                                className="text-danger"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <label
                                htmlFor="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                className="form-control"
                                minLength={8}
                                name="confirmPassword"
                                onChange={[Function]}
                                placeholder="Re-enter password"
                                required={true}
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                className="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>,
                        ],
                        "className": "login-wrapper",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": <h3>
                            Authors Haven
                          </h3>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Authors Haven",
                          },
                          "ref": null,
                          "rendered": Array [
                            "Authors Haven",
                          ],
                          "type": "h3",
                        },
                        Object {
                          "instance": <form>
                            <div
                              class="form-group"
                            >
                              <label
                                for="newpassword"
                              >
                                New Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="password"
                                placeholder="Enter new password"
                                required=""
                                type="password"
                              />
                              <span
                                class="text-danger"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <label
                                for="confirmpassword"
                              >
                                Confirm Password
                              </label>
                              <input
                                class="form-control"
                                minlength="8"
                                name="confirmPassword"
                                placeholder="Re-enter password"
                                required=""
                                type="password"
                              />
                            </div>
                            <p>
                              <button
                                class="btn btn-primary"
                                id="login-button"
                              >
                                Change Password
                              </button>
                            </p>
                          </form>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Enter new password"
                                  required={true}
                                  type="password"
                                />
                                <span
                                  className="text-danger"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <label
                                  htmlFor="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  className="form-control"
                                  minLength={8}
                                  name="confirmPassword"
                                  onChange={[Function]}
                                  placeholder="Re-enter password"
                                  required={true}
                                  type="password"
                                />
                              </div>,
                              <p>
                                <button
                                  className="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>,
                            ],
                            "onSubmit": [Function],
                          },
                          "ref": null,
                          "rendered": Array [
                            Object {
                              "instance": <div
                                class="form-group"
                              >
                                <label
                                  for="newpassword"
                                >
                                  New Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="password"
                                  placeholder="Enter new password"
                                  required=""
                                  type="password"
                                />
                                <span
                                  class="text-danger"
                                />
                              </div>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": Array [
                                  <label
                                    htmlFor="newpassword"
                                  >
                                    New Password
                                  </label>,
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter new password"
                                    required={true}
                                    type="password"
                                  />,
                                  <span
                                    className="text-danger"
                                  />,
                                ],
                                "className": "form-group",
                              },
                              "ref": null,
                              "rendered": Array [
                                Object {
                                  "instance": <label
                                    for="newpassword"
                                  >
                                    New Password
                                  </label>,
                                  "key": undefined,
                                  "nodeType": "host",
                                  "props": Object {
                                    "children": "New Password",
                                    "htmlFor": "newpassword",
                                  },
                                  "ref": null,
                                  "rendered": Array [
                                    "New Password",
                                  ],
                                  "type": "label",
                                },
                                Object {
                                  "instance": <input
                                    class="form-control"
                                    minlength="8"
                                    name="password"
                                    placeholder="Enter new password"
                                    required=""
                                    type="password"
                                  />,
                                  "key": undefined,
                                  "nodeType": "host",
                                  "props": Object {
                                    "className": "form-control",
                                    "minLength": 8,
                                    "name": "password",
                                    "onChange": [Function],
                                    "placeholder": "Enter new password",
                                    "required": true,
                                    "type": "password",
                                  },
                                  "ref": null,
                                  "rendered": Array [
                                    undefined,
                                  ],
                                  "type": "input",
                                },
                                Object {
                                  "instance": <span
                                    class="text-danger"
                                  />,
                                  "key": undefined,
                                  "nodeType": "host",
                                  "props": Object {
                                    "children": undefined,
                                    "className": "text-danger",
                                  },
                                  "ref": null,
                                  "rendered": Array [
                                    undefined,
                                  ],
                                  "type": "span",
                                },
                              ],
                              "type": "div",
                            },
                            Object {
                              "instance": <div
                                class="form-group"
                              >
                                <label
                                  for="confirmpassword"
                                >
                                  Confirm Password
                                </label>
                                <input
                                  class="form-control"
                                  minlength="8"
                                  name="confirmPassword"
                                  placeholder="Re-enter password"
                                  required=""
                                  type="password"
                                />
                              </div>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": Array [
                                  <label
                                    htmlFor="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>,
                                  <input
                                    className="form-control"
                                    minLength={8}
                                    name="confirmPassword"
                                    onChange={[Function]}
                                    placeholder="Re-enter password"
                                    required={true}
                                    type="password"
                                  />,
                                ],
                                "className": "form-group",
                              },
                              "ref": null,
                              "rendered": Array [
                                Object {
                                  "instance": <label
                                    for="confirmpassword"
                                  >
                                    Confirm Password
                                  </label>,
                                  "key": undefined,
                                  "nodeType": "host",
                                  "props": Object {
                                    "children": "Confirm Password",
                                    "htmlFor": "confirmpassword",
                                  },
                                  "ref": null,
                                  "rendered": Array [
                                    "Confirm Password",
                                  ],
                                  "type": "label",
                                },
                                Object {
                                  "instance": <input
                                    class="form-control"
                                    minlength="8"
                                    name="confirmPassword"
                                    placeholder="Re-enter password"
                                    required=""
                                    type="password"
                                  />,
                                  "key": undefined,
                                  "nodeType": "host",
                                  "props": Object {
                                    "className": "form-control",
                                    "minLength": 8,
                                    "name": "confirmPassword",
                                    "onChange": [Function],
                                    "placeholder": "Re-enter password",
                                    "required": true,
                                    "type": "password",
                                  },
                                  "ref": null,
                                  "rendered": Array [
                                    undefined,
                                  ],
                                  "type": "input",
                                },
                              ],
                              "type": "div",
                            },
                            Object {
                              "instance": <p>
                                <button
                                  class="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>
                              </p>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": <button
                                  className="btn btn-primary"
                                  id="login-button"
                                >
                                  Change Password
                                </button>,
                              },
                              "ref": null,
                              "rendered": Array [
                                Object {
                                  "instance": <button
                                    class="btn btn-primary"
                                    id="login-button"
                                  >
                                    Change Password
                                  </button>,
                                  "key": undefined,
                                  "nodeType": "host",
                                  "props": Object {
                                    "children": "Change Password",
                                    "className": "btn btn-primary",
                                    "id": "login-button",
                                    "onChange": undefined,
                                  },
                                  "ref": null,
                                  "rendered": Array [
                                    "Change Password",
                                  ],
                                  "type": "button",
                                },
                              ],
                              "type": "p",
                            },
                          ],
                          "type": "form",
                        },
                      ],
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
                "type": [Function],
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
